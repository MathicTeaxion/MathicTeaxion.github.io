<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023牛客寒假算法基础集训营1补题记</title>
    <url>/2023/05/03/2023%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51%E8%A1%A5%E9%A2%98%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>A_简单前后缀模拟，B_四维dp（…），C_简单贪心，D_给出的初始矩形，大体把平面分为了四个部分每一个部分讨论一下取最大值，E_利用叉积判断第三个操作是否一定用过，F_连通块利用并查集DSU，G_维护到叶子结点的线段树不需要懒标记，H_用整个大的减去剩余块的成本，K_dp或者贪心构造，L_期望计算，M_手推方程</p>
<span id="more"></span>
<h2 id="官方题目难度排名"><a class="markdownIt-Anchor" href="#官方题目难度排名"></a> 官方题目难度排名</h2>
<div align=left><img src="https://s2.loli.net/2023/02/05/IBXZvqT8NC1wWQb.png" width="251" height="350" ></div>
<h2 id="a-world-final-world-cup-i"><a class="markdownIt-Anchor" href="#a-world-final-world-cup-i"></a> A. World Final? World Cup! (I)</h2>
<h2 id="b-world-final-world-cup-ii"><a class="markdownIt-Anchor" href="#b-world-final-world-cup-ii"></a> B. World Final? World Cup! (II)</h2>
<h2 id="c-现在是学术时间-i"><a class="markdownIt-Anchor" href="#c-现在是学术时间-i"></a> C. 现在是，学术时间 (I)</h2>
<h2 id="d-现在是学术时间-ii"><a class="markdownIt-Anchor" href="#d-现在是学术时间-ii"></a> D. 现在是，学术时间 (II)</h2>
<h2 id="e-鸡算几何"><a class="markdownIt-Anchor" href="#e-鸡算几何"></a> E. 鸡算几何</h2>
<h2 id="f-鸡玩炸蛋人"><a class="markdownIt-Anchor" href="#f-鸡玩炸蛋人"></a> F. 鸡玩炸蛋人</h2>
<h2 id="g-鸡格线"><a class="markdownIt-Anchor" href="#g-鸡格线"></a> G. 鸡格线</h2>
<h2 id="h-本题主要考察了dfs"><a class="markdownIt-Anchor" href="#h-本题主要考察了dfs"></a> H. 本题主要考察了DFS</h2>
<h2 id="i-本题也主要考察了dfs"><a class="markdownIt-Anchor" href="#i-本题也主要考察了dfs"></a> I. 本题也主要考察了DFS</h2>
<h2 id="j本题竟也主要考察了dfs"><a class="markdownIt-Anchor" href="#j本题竟也主要考察了dfs"></a> J.本题竟也主要考察了DFS</h2>
<h2 id="k-本题主要考察了dp"><a class="markdownIt-Anchor" href="#k-本题主要考察了dp"></a> K. 本题主要考察了dp</h2>
<h2 id="l-本题主要考察了运气"><a class="markdownIt-Anchor" href="#l-本题主要考察了运气"></a> L. 本题主要考察了运气</h2>
<h2 id="m本题主要考察了找规律"><a class="markdownIt-Anchor" href="#m本题主要考察了找规律"></a> M.本题主要考察了找规律</h2>
]]></content>
      <categories>
        <category>算法竞赛补题记</category>
      </categories>
      <tags>
        <tag>牛客多校</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF_RoundXI详解与思路分享</title>
    <url>/2023/04/24/NSSCTF-RoundXI%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%80%9D%E8%B7%AF%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>抱歉，这篇文章鸽了（</center>
<span id="more"></span>
<p><img src="https://www.nssctf.cn/files/2023/4/6/fad6f84051.png" alt="" /></p>
<h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1>
<h2 id="ez_enc"><a class="markdownIt-Anchor" href="#ez_enc"></a> ez_enc</h2>
<p><a href="https://www.nssctf.cn/problem/3624">题目附件链接</a></p>
<h2 id="mymessage"><a class="markdownIt-Anchor" href="#mymessage"></a> MyMessage</h2>
<p><a href="https://www.nssctf.cn/problem/3626">题目附件链接</a></p>
<h2 id="mygame"><a class="markdownIt-Anchor" href="#mygame"></a> MyGame</h2>
<p><a href="https://www.nssctf.cn/problem/3627">题目附件链接</a></p>
<h2 id="ez_signin"><a class="markdownIt-Anchor" href="#ez_signin"></a> ez_signin</h2>
<p><a href="https://www.nssctf.cn/problem/3623">题目附件链接</a></p>
<h2 id="ez_fac"><a class="markdownIt-Anchor" href="#ez_fac"></a> ez_fac</h2>
<p><a href="https://www.nssctf.cn/problem/3622">题目附件链接</a></p>
<h2 id="ntr"><a class="markdownIt-Anchor" href="#ntr"></a> NTR</h2>
<p><a href="https://www.nssctf.cn/problem/3625">题目附件链接</a></p>
<p>​</p>
]]></content>
      <tags>
        <tag>CTF_WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>WriteUp_GDOUCTF的Crypto详解以及代码思路</title>
    <url>/2023/04/14/WriteUp-GDOUCTF%E7%9A%84Crypto%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>抱歉，这篇文章鸽了（</center>
<span id="more"></span>
<p><img src="https://www.nssctf.cn/files/2023/4/5/2dd3efcc6a.png" alt="" /></p>
<h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1>
<h2 id="absolute_baby_encrytpion"><a class="markdownIt-Anchor" href="#absolute_baby_encrytpion"></a> Absolute_Baby_Encrytpion</h2>
<p><a href="https://www.nssctf.cn/problem/3675">题目附件链接</a></p>
<h2 id="babylua"><a class="markdownIt-Anchor" href="#babylua"></a> babylua</h2>
<p><a href="https://www.nssctf.cn/problem/3673">题目附件链接</a></p>
<h2 id="magic-of-encoding"><a class="markdownIt-Anchor" href="#magic-of-encoding"></a> Magic of Encoding</h2>
<p><a href="https://www.nssctf.cn/problem/3674">题目附件链接</a></p>
<h2 id="math-problem"><a class="markdownIt-Anchor" href="#math-problem"></a> Math Problem</h2>
<p><a href="https://www.nssctf.cn/problem/3677">题目附件链接</a></p>
]]></content>
      <categories>
        <category>CTF密码学题解</category>
      </categories>
      <tags>
        <tag>Crypto_WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>WriteUp_HDCTF2023的Crypto详解以及代码思路</title>
    <url>/2023/04/24/WriteUp-HDCTF2023%E7%9A%84Crypto%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>抱歉，这篇文章鸽了（</center>
<span id="more"></span>
<p><img src="https://www.nssctf.cn/files/2023/4/18/3214386459.png" alt="" /></p>
<h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1>
<h2 id="normal_rsarevenge"><a class="markdownIt-Anchor" href="#normal_rsarevenge"></a> Normal_Rsa(revenge)</h2>
<p><a href="https://www.nssctf.cn/problem/3798">题目附件链接</a></p>
<h2 id="爬过小山去看云"><a class="markdownIt-Anchor" href="#爬过小山去看云"></a> 爬过小山去看云</h2>
<p><a href="https://www.nssctf.cn/problem/3766">题目附件链接</a></p>
<h2 id="math_rsa"><a class="markdownIt-Anchor" href="#math_rsa"></a> Math_Rsa</h2>
<p><a href="https://www.nssctf.cn/problem/3768">题目附件链接</a></p>
<h2 id="spy_des"><a class="markdownIt-Anchor" href="#spy_des"></a> Spy_DES</h2>
<p><a href="https://www.nssctf.cn/problem/3770">题目附件链接</a></p>
]]></content>
      <categories>
        <category>CTF密码学题解</category>
      </categories>
      <tags>
        <tag>Crypto_WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>CET6——Words &amp;&amp; Sentence&#39;s Accumulation</title>
    <url>/2023/05/03/cet6%E2%80%94%E2%80%94words-sentence-s-accumulation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>This article is used for Mathic’s memory of important words and sentence patterns before preparing for the CET6 examination.&gt; _ &lt;</p>
<span id="more"></span>]]></content>
      <categories>
        <category>CET6</category>
      </categories>
      <tags>
        <tag>Words</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces_1.2kLower</title>
    <url>/2018/12/03/codeforces-1-2klower/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>随手练练 Codeforces 上面的题目这大概是 800~1200 分的题目随手记</center>
<span id="more"></span>
<h3 id="cf9a_dieroll"><a class="markdownIt-Anchor" href="#cf9a_dieroll"></a> <a href="https://codeforces.com/problemset/problem/9/A">CF9A_DieRoll</a></h3>
<h3 id="cf4a_watermelon"><a class="markdownIt-Anchor" href="#cf4a_watermelon"></a> <a href="https://codeforces.com/problemset/problem/4/A">CF4A_Watermelon</a></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//mustbe偶数</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">2</span>)cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a % <span class="number">2</span> == <span class="number">0</span>)cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Mathic の 代码风格</title>
    <url>/2023/05/06/mathic%E3%81%AE%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>MathicTeaxion 选手在 OI 和 ACM 竞赛中总结的代码规范，欢迎来踩！</center>
<span id="more"></span>
<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2>
<p><code>#include​</code> 语句必须置于整个程序的开头。</p>
<p>不应 <code>using namespace foo;</code> 若有必要可以 <code>using foo::bar;</code></p>
<p>单行字符数必须不超过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>80</mn></mrow><annotation encoding="application/x-tex">80</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">0</span></span></span></span>。</p>
<h2 id="预编译"><a class="markdownIt-Anchor" href="#预编译"></a> 预编译</h2>
<p><code>#include​</code> 的多个库顺序可有以下两种：</p>
<p>C++ 标准库在前，之后是 C​ 标准库，再后为其它（如交互库等）（工程代码中，本 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>p</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">cpp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">p</span><span class="mord mathnormal">p</span></span></span></span> 所对应的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">.</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">.h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord mathnormal">h</span></span></span></span> 文件应置于开头。）<br />
（仅适用于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">Oi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">i</span></span></span></span> ）按字典序依次排列。</p>
<p>如果有多层嵌套<code>#if </code> , <code>#endif</code> , <code>#endif​</code>后应有对应的注释标识出与其对应的​<code>#if​</code>。</p>
<p>尽量不要适用<code>#define​</code>而使用 <code>const</code> ,  <code>typedef</code> , <code>inline</code>。</p>
<p>所有预编译命令不应缩进（见下）。</p>
<h2 id="缩进"><a class="markdownIt-Anchor" href="#缩进"></a> 缩进</h2>
<p>每个代码块采用  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>  空格缩进。</p>
<h2 id="空格及换行"><a class="markdownIt-Anchor" href="#空格及换行"></a> 空格及换行</h2>
<p>大括号不换行。</p>
<h3 id="需要加空格的地方"><a class="markdownIt-Anchor" href="#需要加空格的地方"></a> 需要加空格的地方：</h3>
<ul>
<li>二元运算符（包括赋值运算符）两侧（运算符例外，见下）；</li>
<li><code>.,</code> 及 <code>;</code> 的右边（如果其不处于行尾）；</li>
<li><code>if</code>, <code>for</code>等控制流关键字与其后的左括号之间 ；</li>
<li><code>do-while</code>中的<code>while</code>、<code>if-else</code>中的<code>else</code>与其前面的右大括号之间；</li>
<li>所有左大括号的左侧（根据不换行的策略，左大括号不应处于行首）；</li>
<li><code>? :</code>的两侧（包括构造函数初始化列表中的<code>:</code>）；<br />
类型中<code>*</code>,<code>&amp;</code>的左侧（如：<code>const int &amp;a</code>, <code>int A(int *&amp;a)</code>）；<br />
花括号与其内部语句/数组初始化列表之间（如果在同一行）；<br />
常成员函数的<code>const</code>两侧。</li>
</ul>
<h3 id="一定不能加空格的地方"><a class="markdownIt-Anchor" href="#一定不能加空格的地方"></a> 一定不能加空格的地方：</h3>
<p>小括号及中括号与其内部的表达式/参数列表之间；<br />
函数名与左括号之间（包括声明/定义/使用）；<br />
单目运算符（ <code>!</code> , <code>-</code> , <code>*</code> , <code>&amp;</code> , <code>~</code> ）之后（或自增自减运算符与其操作数之间）；<br />
<code>,</code> 及 <code>;</code> 的左侧；<br />
类型中*,&amp;的右侧；<br />
<code>.</code> , <code>-&gt;</code> , <code>::</code> 的两侧；<br />
<code>operator</code> 与所要重载的运算符之间（运算符与参数列表之间，根据第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 条，也不应空格）。<br />
若表达式过长内部可以换行，运算符处于行首（而非行尾）；缩进以使表达式对齐为准；换行的优先级较高的子表达式也应加括号以避免误读。</p>
<p>参数列表/初始化列表过长时内部也可换行，逗号处于行尾；缩四空格。</p>
<p>极短的函数可以写到一行（但绝不能超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>80</mn></mrow><annotation encoding="application/x-tex">80</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">0</span></span></span></span> 字符）。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct AVeryVeryVeryVeryVeryVeryVeryVeryVeryLongStruct&#123;</span><br><span class="line">  int aVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongVariable, d;</span><br><span class="line">  AVeryVeryVeryVeryVeryVeryVeryVeryVeryLongStruct(int a, int b, int c, int d)</span><br><span class="line">      : aVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongVariable(a) &#123;</span><br><span class="line">    this-&gt;d = b + c * d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inline int min(int x, int y) &#123; return x &lt; y ? x : y; &#125;</span><br><span class="line">int gcd(int x, int y) &#123; return y ? gcd(y, x % y) : x; &#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  int thisVariableIsToBeLong = 2, thisVariableIsToBeLongerAndLonger = 23;</span><br><span class="line">  AVeryVeryVeryVeryVeryVeryVeryVeryVeryLongStruct s(</span><br><span class="line">      thisVariableIsToBeLong, thisVariableIsToBeLong,</span><br><span class="line">      thisVariableIsToBeLongerAndLonger,</span><br><span class="line">      thisVariableIsToBeLongerAndLonger</span><br><span class="line">  );</span><br><span class="line">  printf(&quot;%d\n&quot;, s.d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="空行"><a class="markdownIt-Anchor" href="#空行"></a> 空行</h2>
<p>所有 <code>#include &lt;foobar&gt;</code> 与 <code>using foo::bar;</code> 之间不应空行，之后应空一行。</p>
<p>一系列常量定义的上下应有空行。</p>
<p>函数/结构体定义两侧应有空行（一系列短小到可以写到一行的函数，如<code>min</code> , <code>max</code> ，之间可以不空行）。</p>
<p>一系列全局变量定义的上下应有空行。</p>
<p>语句之间可根据其意义酌情空行。</p>
<p>任何位置不能出现连续的两个（或以上）空行。</p>
<p>函数定义<br />
<code>main​</code>函数返回值必须为​<code>int</code> ​, <code>return 0​</code>不可忽略；</p>
<p>类/结构体传参在大多数情况下不应传值（除非难以避免地产生拷贝，或一些特殊要求），而应传引用。</p>
<p>极其简短的函数可以写作一行（但绝不能超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>80</mn></mrow><annotation encoding="application/x-tex">80</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">0</span></span></span></span> 字符），此时花括号内部应有空格（空函数体 <code>&#123;&#125;</code> 除外）。</p>
<p>单个函数的长度不应过长（例如超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn></mrow><annotation encoding="application/x-tex">100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span> 行）。</p>
<p>命名规则<br />
一般情况下应采用驼峰命名法，变量开头小写，函数/类/结构体开头大写。</p>
<p>结构体/类成员函数，可以小写开头。</p>
<p>特例：</p>
<p><code>main</code>函数；<br />
变量可以以一个小写字母命名；<br />
全局数组名可使用 1 个大写字母 + 0~2 个数字命名，如A, T1,F01；<br />
模板。如 <code>readInt</code> ,  <code>pow_mod</code> ;<br />
采用对应算法缩写，如 <code>KMP</code> ,  <code>CRT</code> ,  <code>NTT</code>  , <code>CDQ</code> ；<br />
简短的 <code>inline</code> 函数，如 <code>min</code> ,  <code>upd</code> (用作数据结构中的 update 操作);<br />
常量可以大写字母命名，如 <code>N</code> ,  <code>M</code> ；<br />
临时变量可以以下划线开头。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Example Code</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>, c;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = <span class="built_in">getchar</span>()));</span><br><span class="line">  <span class="keyword">do</span> ans = ans * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = <span class="built_in">getchar</span>()));</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> g = <span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200050</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pow_mod</span><span class="params">(LL x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">  LL ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ((p += mod - <span class="number">1</span>) %= (mod - <span class="number">1</span>); p; p &gt;&gt;= <span class="number">1</span>, (x *= x) %= mod)</span><br><span class="line">    <span class="keyword">if</span> (p &amp; <span class="number">1</span>) (ans *= x) %= mod;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL inv[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(LL *A, <span class="type">int</span> len, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> k = len;</span><br><span class="line">    <span class="keyword">while</span> (~j &amp; k) j ^= (k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) std::<span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    LL wn = <span class="built_in">pow_mod</span>(g, (mod - <span class="number">1</span>) / h * opt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">      LL w = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = j; i &lt; j + (h &gt;&gt; <span class="number">1</span>); ++i) &#123;</span><br><span class="line">        LL _tmp1 = A[i], _tmp2 = A[i + (h &gt;&gt; <span class="number">1</span>)] * w;</span><br><span class="line">        A[i] = (_tmp1 + _tmp2) % mod;</span><br><span class="line">        A[i + (h &gt;&gt; <span class="number">1</span>)] = (_tmp1 - _tmp2) % mod;</span><br><span class="line">        (w *= wn) %= mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opt == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">      (A[i] *= -(mod - <span class="number">1</span>) / len) %= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL F[N], G[N];</span><br><span class="line">LL T1[N * <span class="number">4</span>], T2[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Conv</span><span class="params">(LL *A, <span class="type">int</span> n, LL *B, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (len &lt;= n + m) len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    T1[i] = (i &lt; n ? A[i] : <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    T2[i] = (i &lt; m ? B[i] : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">NTT</span>(T1, len, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">NTT</span>(T2, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    (T1[i] *= T2[i]) %= mod;</span><br><span class="line">  <span class="built_in">NTT</span>(T1, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r - <span class="number">1</span>) &#123;</span><br><span class="line">    F[l] = (l == <span class="number">0</span> ? <span class="number">1</span> : F[l] * inv[l] % mod);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">Solve</span>(l, mid);</span><br><span class="line">  <span class="built_in">Conv</span>(F + l, mid - l, G, r - l);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = mid; i &lt; r; ++i)</span><br><span class="line">    (F[i] += T1[i - l]) %= mod;</span><br><span class="line">  <span class="built_in">Solve</span>(mid, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  n = <span class="built_in">readInt</span>();</span><br><span class="line"></span><br><span class="line">  inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    inv[i] = -(mod / i) * inv[mod % i] % mod;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;G[i]);</span><br><span class="line">    (G[i] *= i) %= mod;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Solve</span>(<span class="number">0</span>, n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (F[i] + mod) % mod);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：此为多项式 exp​ 模板。</p>
]]></content>
      <categories>
        <category>代码规范</category>
      </categories>
      <tags>
        <tag>代码风格</tag>
      </tags>
  </entry>
  <entry>
    <title>Oop_java于Pintia平台的题目合集（函数题）</title>
    <url>/2023/04/30/oop-java%E4%BA%8Epintia%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-%E5%87%BD%E6%95%B0%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本篇章是用于Pintia考试的面向对象程序设计题库复习资料--《函数题》</center>
<span id="more"></span>
<h2 id="函数题"><a class="markdownIt-Anchor" href="#函数题"></a> 函数题</h2>
<h3 id="6-1-设计一个矩形类rectangle"><a class="markdownIt-Anchor" href="#6-1-设计一个矩形类rectangle"></a> 6-1 设计一个矩形类Rectangle</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>&#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">1</span>,height = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> width, <span class="type">double</span> height)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (width + height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-根据派生类写出基类java"><a class="markdownIt-Anchor" href="#6-2-根据派生类写出基类java"></a> 6-2 根据派生类写出基类（Java）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String id;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public String getId()&#123;</span></span><br><span class="line"><span class="comment">        return id;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public String setId(String id)&#123;</span></span><br><span class="line"><span class="comment">        return this.id = id;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public void setName(String name)&#123;</span></span><br><span class="line"><span class="comment">        this.name = name;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public String getName()&#123;</span></span><br><span class="line"><span class="comment">        return name;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public People()&#123;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public People(String id,String name)&#123;</span></span><br><span class="line"><span class="comment">        this.id = id;</span></span><br><span class="line"><span class="comment">        this.name = name;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public void say()&#123;</span></span><br><span class="line"><span class="comment">        System.out.print(&quot;I&#x27;m a person! My name is &quot; + this.name + &quot;.&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String sid;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;Pintia Student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name, String sid, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id, name);</span><br><span class="line">        <span class="built_in">this</span>.sid = sid;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a student. My name is &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">zs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        zs.setId(<span class="string">&quot;370211X&quot;</span>);</span><br><span class="line">        zs.setName(<span class="string">&quot;Zhang San&quot;</span>);</span><br><span class="line">        zs.say();</span><br><span class="line">        System.out.println(zs.getId() + <span class="string">&quot; , &quot;</span> + zs.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Student</span> <span class="variable">ls</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;330106&quot;</span>,<span class="string">&quot;Li Si&quot;</span>,<span class="string">&quot;20183001007&quot;</span>,<span class="number">98</span>);</span><br><span class="line">        ls.say();</span><br><span class="line">        System.out.println(ls.getId() + <span class="string">&quot; : &quot;</span> + ls.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="type">People</span> <span class="variable">ww</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        ww.setName(<span class="string">&quot;Wang Wu&quot;</span>);</span><br><span class="line">        ww.say();</span><br><span class="line">        </span><br><span class="line">        <span class="type">People</span> <span class="variable">zl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&quot;370202&quot;</span>, <span class="string">&quot;Zhao Liu&quot;</span>);</span><br><span class="line">        zl.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-3-写出派生类构造方法java"><a class="markdownIt-Anchor" href="#6-3-写出派生类构造方法java"></a> 6-3 写出派生类构造方法（Java）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String sid;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name, String sid, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        super(id, name);//调用父类构造函数以初始化父类属性</span></span><br><span class="line"><span class="comment">        this.sid = sid; //初始化子类属性</span></span><br><span class="line"><span class="comment">        this.score = score;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;(Name:&quot;</span> + <span class="built_in">this</span>.getName() + <span class="string">&quot;; id:&quot;</span> + <span class="built_in">this</span>.getId() + <span class="string">&quot;; sid:&quot;</span> + <span class="built_in">this</span>.sid + <span class="string">&quot;; score:&quot;</span> + <span class="built_in">this</span>.score + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">zs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;370202X&quot;</span>, <span class="string">&quot;Zhang San&quot;</span>, <span class="string">&quot;1052102&quot;</span>, <span class="number">96</span>);</span><br><span class="line">        System.out.println(zs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-4-重写父类方法equals"><a class="markdownIt-Anchor" href="#6-4-重写父类方法equals"></a> 6-4 重写父类方法equals</h3>
<blockquote>
<p>函数接口定义：在类Student中重写Object类的equals方法。使Student对象学号(id)相同时判定为同一对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">     <span class="type">int</span> id;</span><br><span class="line">     String name;</span><br><span class="line">     <span class="type">int</span> age;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id,     String name,     <span class="type">int</span> age)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.id = id;</span><br><span class="line">         <span class="built_in">this</span>.name = name;</span><br><span class="line">         <span class="built_in">this</span>.age = age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     public boolean equals(Object obj)&#123;</span></span><br><span class="line"><span class="comment">         boolean b = false;</span></span><br><span class="line"><span class="comment">         if(obj instanceof Student)&#123;</span></span><br><span class="line"><span class="comment">            Student s = (Student) obj;</span></span><br><span class="line"><span class="comment">            if(s.id == this.id)&#123;</span></span><br><span class="line"><span class="comment">                b = true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(sc.nextInt(),sc.next(),sc.nextInt());</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(sc.nextInt(),sc.next(),sc.nextInt());</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-5-从抽象类shape类扩展出一个圆形类circle"><a class="markdownIt-Anchor" href="#6-5-从抽象类shape类扩展出一个圆形类circle"></a> <strong>6-5 从抽象类shape类扩展出一个圆形类Circle</strong></h3>
<blockquote>
<p>请从下列的抽象类shape类扩展出一个圆形类Circle,这个类圆形的半径radius作为私有成员，类中应包含初始化半径的构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">shape</span> &#123;<span class="comment">// 抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;<span class="comment">// 求面积</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>; <span class="comment">// 求周长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主类从键盘输入圆形的半径值，创建一个圆形对象，然后输出圆形的面积和周长。保留4位小数。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">shape</span> &#123;<span class="comment">// 抽象类</span></span><br><span class="line">     <span class="comment">/* 抽象方法 求面积 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">( )</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 抽象方法 求周长 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">( )</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Circle extends shape&#123;</span></span><br><span class="line"><span class="comment">    private  double r;</span></span><br><span class="line"><span class="comment">    public Circle(double r)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        this.r=r;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public double getArea() &#123;</span></span><br><span class="line"><span class="comment">        return Math.PI*(this.r*this.r);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public double getPerimeter( )&#123;</span></span><br><span class="line"><span class="comment">         return 2*Math.PI*r;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.####&quot;</span>);<span class="comment">// 保留4位小数</span></span><br><span class="line">         <span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> input.nextDouble( ); </span><br><span class="line">        <span class="type">shape</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Circle</span>(r);</span><br><span class="line"> </span><br><span class="line">        System.out.println(d.format(c.getArea()));</span><br><span class="line">        System.out.println(d.format(c.getPerimeter()));</span><br><span class="line">        input.close();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-6-创建一个直角三角形类实现ishape接口"><a class="markdownIt-Anchor" href="#6-6-创建一个直角三角形类实现ishape接口"></a> <strong>6-6 创建一个直角三角形类实现IShape接口</strong></h3>
<blockquote>
<p>创建一个直角三角形类（regular triangle）RTriangle类，实现下列接口IShape。两条直角边长作为RTriangle类的私有成员，类中包含参数为直角边的构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IShape</span> &#123;<span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>; <span class="comment">// 抽象方法 求面积</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>; <span class="comment">// 抽象方法 求周长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直角三角形类的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">直角三角形类的构造函数原型如下：</span><br><span class="line">RTriangle(<span class="type">double</span> a, <span class="type">double</span> b);</span><br></pre></td></tr></table></figure>
<p>其中 <code>a</code> 和 <code>b</code> 都是直角三角形的两条直角边。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class RTriangle implements IShape&#123;</span></span><br><span class="line"><span class="comment">    private double a;</span></span><br><span class="line"><span class="comment">    private double b;</span></span><br><span class="line"><span class="comment">    public RTriangle(double a, double b) &#123;</span></span><br><span class="line"><span class="comment">        this.a=a;</span></span><br><span class="line"><span class="comment">        this.b=b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">        public double getArea()&#123;</span></span><br><span class="line"><span class="comment">            return (this.a*this.b)/2;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        public double getPerimeter() &#123;</span></span><br><span class="line"><span class="comment">            return this.a + this.b + Math.sqrt(a * a + b * b);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.####&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line">        <span class="type">IShape</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RTriangle</span>(a, b);</span><br><span class="line">        System.out.println(d.format(r.getArea()));</span><br><span class="line">        System.out.println(d.format(r.getPerimeter()));</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-7-jmu-java-06异常-多种类型异常的捕获"><a class="markdownIt-Anchor" href="#6-7-jmu-java-06异常-多种类型异常的捕获"></a> <strong>6-7 jmu-Java-06异常-多种类型异常的捕获</strong></h3>
<blockquote>
<p>如果try块中的代码有可能抛出多种异常，且这些异常之间可能存在继承关系，那么在捕获异常的时候需要注意捕获顺序。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (choice.equals(<span class="string">&quot;number&quot;</span>))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NumberFormatException</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (choice.equals(<span class="string">&quot;illegal&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice.equals(<span class="string">&quot;except&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">            if (choice.equals(&quot;number&quot;))</span></span><br><span class="line"><span class="comment">                System.out.println (&quot;number format exception&quot;);</span></span><br><span class="line"><span class="comment">            if (choice.equals(&quot;illegal&quot;))</span></span><br><span class="line"><span class="comment">                System.out.println (&quot;illegal argument exception&quot;);</span></span><br><span class="line"><span class="comment">            if (choice.equals(&quot;except&quot;))</span></span><br><span class="line"><span class="comment">                System.out.println (&quot;other exception&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println (e);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-8-jmu-java-03面向对象基础-object"><a class="markdownIt-Anchor" href="#6-8-jmu-java-03面向对象基础-object"></a> <strong>6-8 jmu-Java-03面向对象基础-Object</strong></h3>
<blockquote>
<p>输入整数n，创建n个对象，放入同一个数组中。</p>
<p>如果输入 <code>c</code> ，则 <code>new Computer();</code>  //注意：Computer是系统中已有的类，无需自己编写</p>
<p>如果输入 <code>d</code> ，则根据随后的输入创建 <code>Double</code> 类型对象。</p>
<p>如果输入 <code>i</code> ，则根据随后的输入创建 <code>Integer</code> 类型对象。</p>
<p>如果输入 <code>s</code> ，则根据随后的输入创建 <code>String</code> 类型对象。</p>
<p>如果不是以上这些输入，则不创建对象，而是将 <code>null</code> 存入数组相应位置。</p>
<p>最后<strong>倒序</strong>输出数组中的所有对象，如果数组中相应位置的元素为 <code>null</code> 则不输出。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int n = sc.nextInt();</span></span><br><span class="line"><span class="comment">        Object []a = new Object[n];</span></span><br><span class="line"><span class="comment">        for(int i = 0;i &lt; n;i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            String b = sc.next();</span></span><br><span class="line"><span class="comment">            char s = b.charAt(0);</span></span><br><span class="line"><span class="comment">            if(s ==&#x27;c&#x27;)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                //a[i] = null;</span></span><br><span class="line"><span class="comment">                a[i] = new Computer();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(s ==&#x27;d&#x27;)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                double t = sc.nextDouble();</span></span><br><span class="line"><span class="comment">                a[i] = t;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(s == &#x27;i&#x27;)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                Integer t = sc.nextInt();</span></span><br><span class="line"><span class="comment">                a[i] = t;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else if(s == &#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                String t = sc.next();</span></span><br><span class="line"><span class="comment">                a[i] = t;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                a[i] = null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for(int i = n-1;i &gt;= 0;i--)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if(a[i]==null) continue;</span></span><br><span class="line"><span class="comment">            System.out.println(a[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-9-人口统计"><a class="markdownIt-Anchor" href="#6-9-人口统计"></a> <strong>6-9 人口统计</strong></h3>
<blockquote>
<p>函数接口定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numofHan</span><span class="params">(String data[])</span></span><br></pre></td></tr></table></figure>
<p>其中  <code>data[]</code>  是传入的参数。  <code>data[]</code> 中的每一个元素都是一个完整的人员信息字符串，该字符串由“姓名，性别，年龄，民族”，各项之间用英文半角的逗号分隔。函数须返回 值是汉族的人数。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> HUMANNUM=<span class="number">10</span>;</span><br><span class="line">        String persons[]=<span class="keyword">new</span> <span class="title class_">String</span>[HUMANNUM];</span><br><span class="line">        Scanner in=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;persons.length;i++)</span><br><span class="line">            persons[i]=in.nextLine();</span><br><span class="line">        <span class="type">int</span> result=numofHan(persons);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*在此处给出函数numofHan()*/</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public static int numofHan(String data[])&#123;</span></span><br><span class="line"><span class="comment">        int n=0;</span></span><br><span class="line"><span class="comment">        for(int i=0 ; i&lt;data.length ; i++)&#123;</span></span><br><span class="line"><span class="comment">            if(data[i].indexOf(&quot;汉族&quot;)&gt;=0)&#123;</span></span><br><span class="line"><span class="comment">                 n++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">       return n;   </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Uni</category>
      </categories>
      <tags>
        <tag>Pintia</tag>
      </tags>
  </entry>
  <entry>
    <title>Oop_java于Pintia平台的题目合集（判断题）</title>
    <url>/2023/04/30/oop-java%E4%BA%8Epintia%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-%E5%88%A4%E6%96%AD%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本篇章是用于Pintia考试的面向对象程序设计题库复习资料--《判断题》</center>
<span id="more"></span>
<h2 id="判断题"><a class="markdownIt-Anchor" href="#判断题"></a> 判断题</h2>
<ul>
<li>
<p>Java允许创建不规则数组，即Java多维数组中各行的列数可以不同。（T）</p>
</li>
<li>
<p>Java定义二维数组时，第二维元素个数可以不相等。（F）</p>
</li>
<li>
<p>Set集合是有序的，不可以包含重复的对象。（F）</p>
</li>
<li>
<p>一个异常处理中 finally语句块可以不出现，也可以出现一次。（T）</p>
</li>
<li>
<p>Java中的常量用final关键字修饰，标识符一般大写，赋值机会只有一次，必须在定义的时候赋初值。（F）*2</p>
</li>
<li>
<p>abstract可以与final同时修饰同一个类。（F）*2</p>
</li>
<li>
<p>Java中类和方法都不允许嵌套定义。（F）*2</p>
</li>
<li>
<p>一个Java类可以有多个父类。（F）*2</p>
</li>
<li>
<p>集合Set是通过键-值对的方式来存储对象的。（F）*2</p>
</li>
<li>
<p>数组中有length()这个方法，如array.length()表示数组array中元素的个数。（F）*2</p>
</li>
<li>
<p>一个Java源文件就是由类和接口组成的。（T）*2</p>
</li>
<li>
<p>静态变量是被同一个类的所有实例所共享的。（T）*2</p>
</li>
<li>
<p>字节码文件是与平台无关的二进制码，执行时由解释器解释成本地机器码。（T）*2</p>
</li>
<li>
<p>用static修饰的变量是类变量。（T）</p>
<p><font color=red>属于整个类，而不是单个对象。类变量可以通过类名直接访问，也可以通过对象名访问。所有对象共享同一个类变量的值。</font></p>
</li>
<li>
<p>有的类定义时可以不定义构造函数，所以构造函数不是必需的。（F）*2</p>
<p><font color=red>每个类都必须至少有一个构造函数。如果一个类没有显式定义任何构造函数，编译器会默认生成一个无参构造函数。</font></p>
</li>
<li>
<p>一个类的静态方法不可以访问该类的非静态成员变量。（T）</p>
<p><font color=red>因为静态方法属于类而不是类的实例，它们在类加载时就已经存在于内存中，而非静态成员变量和方法是属于类的实例的，它们只有在创建类的实例后才能访问。因此，如果一个静态方法想要访问一个非静态成员变量或方法，必须通过类的实例来访问。</font><br />
可以通过以下两种方式来访问非静态成员变量和方法：</p>
<ol>
<li>在非静态方法中，创建类的实例并通过实例来访问非静态成员变量和方法，如下所示：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">//私有成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//两个公有成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        obj.setValue(<span class="number">10</span>);</span><br><span class="line">        System.out.println(obj.getValue());  <span class="comment">// 输出 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>在静态方法中，通过创建类的实例来访问非静态成员变量和方法，如下所示：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">//私有成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//两个公有成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公有的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printValue</span><span class="params">(MyClass obj)</span> &#123;</span><br><span class="line">        System.out.println(obj.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        obj.setValue(<span class="number">10</span>);</span><br><span class="line">        printValue(obj);  <span class="comment">// 输出 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li>
<p>在实例方法或构造器中，this用来引用当前对象，通过使用this可引用当前对象的任何成员。（T）</p>
<p><font color=red>构造函数没有返回值类型</font></p>
</li>
<li>
<p>类也是一种数据类型（type）。（T）</p>
</li>
<li>
<p>一个类的非静态方法可以访问静态成员变量。（T）</p>
<p><font color=red>因为静态成员变量属于类而不属于类的实例，它们在类加载时就已经存在于内存中，因此在任何实例化之前就已经存在。而非静态方法是属于类的实例的，因此它们可以访问静态成员变量，因为静态成员变量在实例化之前就已经存在于内存中。</font></p>
</li>
<li>
<p>实例变量只能通过对象名访问，类变量既可以通过某个对象名也可以通过类名来访问。（T）</p>
</li>
<li>
<p>引用一个类的属性或调用其方法，必须以这个类的对象为前缀。（F）*2</p>
</li>
<li>
<p>声明构造方法时，可以使用private访问修饰符。（F）*2</p>
<p><font color=red>私有构造方法，只能在该类内部被调用，不能从类的外部访问，可限制实例化。</font></p>
</li>
<li>
<p>引用一个类的属性或调用其方法，必须以这个类的对象为前缀。（F）</p>
<p><font color=red>引用一个类的属性或调用其方法，如果是实例变量或实例方法，则必须以该类的对象作为前缀，如果是静态变量或静态方法，则可以使用该类的类名作为前缀或者使用该类的对象作为前缀。</font></p>
</li>
<li>
<p>如果一个类的声明中没有使用 extends 关键字，这个类被系统默认为是继承 Object 类。（T）</p>
<p><font color=red>这是因为所有 Java 类都是 <code>Object</code> 类的子类，如果没有指定父类，就默认继承 <code>Object</code> 类。</font></p>
</li>
<li>
<p>覆盖只能在不同的类中完成。（T）</p>
<p><font color=red>覆盖只能在继承关系中完成，即在父类和子类之间进行。在同一个类中无法覆盖。</font></p>
</li>
<li>
<p>Object 是 Java 中所有类的共同父类。（T）</p>
</li>
<li>
<p>可以使用 protected 修饰符来防止方法和数据被不同包的非子类访问。（T）</p>
<p><font color=red>使用 <code>protected</code> 修饰符可以限制方法和数据的访问范围，只允许在同一包内或子类中访问。被 <code>protected</code> 修饰的方法和数据可以被同一包内的其他类和该类的子类访问，但不能被其他包中的类访问。</font></p>
</li>
<li>
<p>子类不继承父类的构造方法。（T）</p>
<p><font color=red>子类继承父类的所有方法和属性，但是父类的构造方法并不是一种属性或方法，它是用于初始化父类的实例变量的特殊方法。因此子类并不会继承父类的构造方法，但是子类在创建对象时会先调用父类的构造方法进行初始化，如果子类没有定义构造方法，则会默认调用父类的无参构造方法。如果父类没有无参构造方法，而子类又没有显式调用父类的其他构造方法，则会编译错误。</font></p>
</li>
<li>
<p>构造方法可以调用本类中重载的构造方法和它的父类的构造方法。（T）</p>
<p><font color=red>构造方法可以调用本类中重载的构造方法和它的父类的构造方法。在子类的构造方法中，如果没有明确调用父类的构造方法，则会默认调用父类的无参构造方法。如果父类没有无参构造方法，则需要在子类的构造方法中显式地调用父类的带参构造方法，并传入相应的参数。可以使用 <code>super</code> 关键字来调用父类的构造方法。</font></p>
</li>
<li>
<p>为了克服单继承的缺点，Java使用了接口，一个类可以实现多个接口。（T）</p>
</li>
<li>
<p>接口中的方法默认是 public abstract 方法。（T）</p>
<p><font color=red>接口中的方法默认是 public abstract 方法。因此，在接口中定义方法时可以省略这些修饰符。例如，下面两个方法声明是等价的：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p><font color=red>在接口中定义的变量默认是 public static final 变量，因此也可以省略这些修饰符。例如，下面两个变量声明是等价的：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VAR1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">VAR2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>类在实现接口方法时必须给出方法体，并且一定要用 public 来修饰。（T）</p>
<p><font color=red>在实现接口时，类必须实现接口中所有的抽象方法，但是对于默认方法和静态方法，可以选择是否进行实现。对于抽象方法，类必须给出方法体并且用 public 来修饰。</font></p>
</li>
<li>
<p>一个 Java 源文件就是由类和接口组成的。（T）</p>
</li>
<li>
<p>如果一个类声明实现一个接口，但没有实现接口中的所有方法，那么这个类必须是 abstract 类。（T）</p>
<p><font color=red>如果一个类声明实现一个接口，但没有实现接口中的所有方法，那么这个类必须是抽象类，或者会编译错误。因为抽象类可以有未实现的抽象方法，而普通类必须实现接口中所有的方法。</font></p>
</li>
<li>
<p>类在实现接口的方法时，必须显式地使用 public 修饰符。（T）</p>
<p><font color=red>类在实现接口的方法时必须使用 public 访问修饰符，因为接口中的方法默认是 public 的，而实现类必须保证实现的方法的访问修饰符不低于接口中的方法。如果使用了比 public 更低的访问修饰符，编译器会报错。</font></p>
</li>
<li>
<p>一个类只能有一个父类，但一个接口可以有一个以上的父接口。（T）</p>
<p><font color=red>一个类只能继承一个父类，但是一个接口可以继承多个父接口，这就是接口的多重继承性质。在 Java 中，使用 <code>extends</code> 关键字来继承一个接口，例如：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> <span class="keyword">extends</span> <span class="title class_">Interface1</span>, Interface2 &#123;</span><br><span class="line">    <span class="comment">// 接口方法的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里，<code>MyInterface</code> 接口继承了 <code>Interface1</code> 和 <code>Interface2</code> 两个父接口。</p>
</li>
<li>
<p>一个类可以实现多个接口。（T）</p>
</li>
<li>
<p>接口中的方法默认都是静态的。（F）*2</p>
<p><font color=red>接口中的方法默认都是抽象的，而不是静态的。</font></p>
</li>
<li>
<p>接口中的属性，都是静态常量。（T）</p>
</li>
<li>
<p>所有异常都必须捕获。（F）</p>
<p><font color=red>Java中的异常可以分为检查异常和非检查异常两种。非检查异常是指运行时异常，不需要在方法中显式地捕获或声明抛出，可以被忽略。</font></p>
</li>
<li>
<p>一个try语句可以有多个catch语句与之对应。（T）</p>
</li>
<li>
<p>异常也是一个对象。（T）</p>
</li>
<li>
<p>用户可以自定义自己的异常类。（T）</p>
<p><font color=red>Java允许用户自定义自己的异常类。通过定义一个类来继承<code>java.lang.Exception</code>或它的子类，就可以创建自己的异常类。</font></p>
</li>
<li>
<p>当一个方法在运行过程中产生一个异常，则这个方法会终止，但是整个程序不一定终止运行。（T）</p>
</li>
<li>
<p>程序运行时所产生的系统定义的异常将自动被抛出。（T）</p>
</li>
<li>
<p>String字符串在创建后可以被修改。（F）</p>
<p><font color=red>Java中的字符串对象是不可变的，但是我们可以创建新的字符串对象来表示新的字符串值。同时，也可以使用<code>StringBuilder</code>或<code>StringBuffer</code>等可变字符串类来修改字符串。</font></p>
</li>
<li>
<p>通常我们用“==”来比较两个字符串变量的内容是否相等。（F）</p>
<p><font color=red><code>==</code>比较的是存储在变量中的内存地址是否相同，而不是变量所引用的字符串的内容是否相同。如果要比较两个字符串的内容是否相同，应该使用<code>equals()</code>方法或<code>equalsIgnoreCase()</code>方法。<code>equals()</code>方法用于比较两个字符串是否完全相同，包括大小写、字符内容等方面。<code>equalsIgnoreCase()</code>方法则用于比较两个字符串是否相同，忽略大小写。如下的<code>s3</code>则是通过<code>new</code>关键字创建了一个新的字符串对象，它的内容和<code>s1</code>相同，但是它的引用与<code>s1</code>不同。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s3);  <span class="comment">// false</span></span><br><span class="line">System.out.println(s1.equals(s3));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Java中数组的元素只能是简单数据类型。（F）</p>
<p><font color=red>还可以是对象类型，比如<code>String</code>类型</font></p>
</li>
<li>
<p>数组作为方法的参数时，必须加在数组名后加方括号。（T）</p>
<p><font color=red>当数组作为方法的参数时，数组名后面必须加上方括号，表示该参数是一个数组。这是因为数组是一个对象，需要以引用类型的方式进行传递，而方括号可以告诉编译器这是一个数组类型的参数。</font></p>
</li>
<li>
<p>数组中有<code>length()</code>这个方法，如<code>array.length()</code>表示数组<code>array</code>中元素的个数（F）</p>
<p><font color=red>在Java中，数组是一种特殊的对象，其长度（即元素个数）存储在一个名为<code>length</code>的公共<strong>实例变量</strong>中，而不是一个方法。因此，要获取一个数组的长度，应该使用以下语法：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;  <span class="comment">// 获取数组长度</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在Java中，高优先级的可运行线程会抢占低优先级线程。（F）</p>
<p><font color=red>具有更高优先级的线程比具有较低优先级的线程更有可能优先执行，但是这并不意味着高优先级的线程总是能够抢占低优先级线程的执行权。此外，Java中还提供了<code>yield()</code>方法，可以使当前线程放弃CPU资源，让其他线程先执行。</font></p>
</li>
<li>
<p>程序开发者必须创建一个线程去管理内存的分配。（F）</p>
<p><font color=red>内存的分配和管理是由 Java 虚拟机（JVM）自动进行的，程序开发者无需手动创建一个线程来管理内存分配。Java 中有一个垃圾回收器（garbage collector），它会自动回收不再使用的内存，使得程序开发者不需要过多关注内存的管理和释放。</font></p>
</li>
<li>
<p>StringBuffer类是线程安全的，StringBuilder类是线程不安全的。（T）</p>
<p><font color=red>因为 StringBuffer 类的方法都被 synchronized 关键字修饰，保证了在多线程环境下的同步性。而 StringBuilder 类没有使用 synchronized 关键字进行同步处理，所以在多线程环境下使用可能会存在线程安全问题。</font></p>
</li>
<li>
<p>ArrayList类是线程安全的。（F）</p>
<p><font color=red>它的方法没有被 synchronized 关键字修饰。因此，在多线程环境下，如果多个线程同时对同一个 <code>ArrayList</code> 进行修改操作，就可能会出现线程安全问题，例如数据丢失、数据不一致等问题。如果需要在多线程环境下安全地使用 List 集合，可以使用 <code>Vector</code> 类或者使用 <code>Collections</code> 工具类中提供的 synchronizedList 方法将 <code>ArrayList</code> 转换为线程安全的 List 集合。</font></p>
</li>
<li>
<p>HashSet类是线程不安全的。（T）</p>
<p><font color=red>同上或者使用 ConcurrentHashSet 类，它是线程安全的 Set 集合实现。</font></p>
</li>
<li>
<TODO>
</li>
</ul>
]]></content>
      <categories>
        <category>Uni</category>
      </categories>
      <tags>
        <tag>Pintia</tag>
      </tags>
  </entry>
  <entry>
    <title>Oop_java于Pintia平台的题目合集（单选题）</title>
    <url>/2023/04/30/oop-java%E4%BA%8Epintia%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-%E5%8D%95%E9%80%89%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本篇章是用于Pintia考试的面向对象程序设计题库复习资料--《单选题》</center>
<span id="more"></span>]]></content>
      <categories>
        <category>Uni</category>
      </categories>
      <tags>
        <tag>Pintia</tag>
      </tags>
  </entry>
  <entry>
    <title>图论小技巧及其扩展</title>
    <url>/2023/05/06/%E5%9B%BE%E8%AE%BA%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%8F%8A%E5%85%B6%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>图论，其实是数学的一门分支，它以图为研究对象。最基础的图论应该是著名的哥尼斯堡七桥问题，那是一个经典的一笔画问题。</p>
<p>竞赛中我们比较常见的是 <strong>最短路算法 最小生成树算法 拓扑排序</strong> 等等。</p>
<p>本篇文章我们不说那些大家都懂烂了的图论算法，讲一些实用的 <s>(没什么用的)</s> 图论小技巧。</p>
<span id="more"></span>
<h2 id="链式前向星存图"><a class="markdownIt-Anchor" href="#链式前向星存图"></a> 链式前向星存图</h2>
<p>最最基础的存图的基本分为两种，使用二维数组和使用 vector ，但这两种方法都有所缺陷。</p>
<p>使用二维数组查询速度很快，但空间复杂度是 O(n^2) 的，一般的题目都接受不了。</p>
<p>使用 vector 可以减少空间复杂度，但是时间就比较不确定了。</p>
<p>所以就出现了一种神奇的存图方式，<strong>链表思想的链式前向星</strong>。</p>
<p>我们通常使用以下数组来完成</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> w[i]<span class="comment">//第 i 条边的权值</span></span><br><span class="line"><span class="type">int</span> to[i]<span class="comment">//第 i 条边的终点</span></span><br><span class="line"><span class="type">int</span> nxt[i]<span class="comment">//下一条的边的编号，不建议叫 next，会挂</span></span><br><span class="line"><span class="type">int</span> head[i]<span class="comment">//以 i 为起始点的第一条边</span></span><br><span class="line"><span class="type">int</span> tot<span class="comment">//边的编号</span></span><br></pre></td></tr></table></figure>
<p>新增加一条边的时候我们进行如下操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    tot++;<span class="comment">//新边的编号</span></span><br><span class="line">    to[tot]=y;<span class="comment">//新一条边的信息</span></span><br><span class="line">    w[tot]=z;</span><br><span class="line">    nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot;<span class="comment">//更新以 x 为起始点的第一条边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样是单向边，双向边要再来一次</span></span><br></pre></td></tr></table></figure>
<p>用下面这种方式就可以枚举出所有以 xx 为起始点的边。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=nxt[i])&#123;<span class="comment">// i 即为该边编号</span></span><br><span class="line">    <span class="comment">//to[i]为可以到达的点头</span></span><br><span class="line">    <span class="comment">//w[i]为这条边的权值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大致思想就是将所有以  x  为起始点的边以链表的形式储存，枚举的时候遍历链表，直到边的编号为 0 (为 0 表示没有其他的边了)</p>
<p>这样就可以满足我们从某个点遍历枚举下个点的需要。</p>
<p>前向星链表被疯狂应用在各个图论题目中，基本上是一个图论题都可以用到吧，属于非常基础的图论技能。</p>
<p><strong>需要注意的是对于双向边的题目，链式前向星的数组需要开边数的两倍，不然会 RE 。</strong></p>
<h2 id="反向建边"><a class="markdownIt-Anchor" href="#反向建边"></a> 反向建边</h2>
<p>对于一个有向图，某些问题中我们需要反向建边来完成操作</p>
<p>比如求其他 n 个点到 k 点的最短路。</p>
<p><s>对每个点跑一遍最短路不就好了吗？</s></p>
<p>事实上我们只需要跑一遍最短路就可以了，只需要把边反向建。</p>
<p>反向建图情况下 k 点到每个点的最短路就是正常情况下该点到 k 点的最短路。</p>
<p>例题 <a href="https://www.luogu.com.cn/problem/P1629">P1629 邮递员送信</a></p>
<p>不只是最短路问题，在遍历问题上也可以使用反向建边来完成</p>
<p>例题 <a href="https://www.luogu.com.cn/problem/P3916">P3916 图的遍历</a></p>
<p>是否需要反向建边，根据题意判断即可。</p>
<p>反向建边还可以来判断某条边是否在最短路上。</p>
<p>对于一个有向图，我们从 11 号点跑一遍正向的最短路 dis[ ] ，从 n 号点跑一遍反向的最短路 dis1[ ]<br />
如果 dis[x] + w(x,y) + dis1[y] = dis[n] 那么我们就可以得出，这条边是在 1 到 n 的最短路上的。</p>
<p>当然如果是无向图的话直接跑就可以了。</p>
<h2 id="虚点连边"><a class="markdownIt-Anchor" href="#虚点连边"></a> 虚点连边</h2>
<p>虚点连边是一种很有效的优化建边复杂度的方式</p>
<p>我们可能会遇见这样一种题，给你几个点，其他的点离这些给出的点的最近距离是多少。</p>
<p>我们可以对于每一个点进行 Spfa，但似乎这样并不是很好操作。</p>
<p>我们可以自己给出一个点，然后向每个被标记的点连一条单向边，这样就只需要进行一次 Spfa 就可以了。</p>
<p>举个例子，橙色为标记点，数字为最近距离。</p>
<p><img src="https://z4a.net/images/2019/02/25/k1ef821096fa7bd112.png" alt="" /></p>
<p>例题 <a href="https://www.luogu.com.cn/problem/P3393">P3393 逃离僵尸岛</a></p>
<p>但似乎这个直接广搜也可以。</p>
<p>如果对于两个点集 A 和 B，你需要对 A 中的每一个点向 B 中的每一个点都建一条边，如果直接操作，复杂度很明显是 O(n^2) 的，有没有更快的方法呢？</p>
<p>我们可以建一个虚点 P ，然后对 A 里的每一个点向 P 连一条单向边边，然后对 P 向 B 中的每一个点建一条单向边，这样只需要 O(2n) 的复杂度就可以完成了。</p>
<p>画个图理解一下。</p>
<p>(优化前)</p>
<p><img src="https://z4a.net/images/2019/02/25/k2.png" alt="" /></p>
<p>(优化后)</p>
<p><img src="https://z4a.net/images/2019/02/25/k3.png" alt="" /></p>
<p>例题 <a href="https://www.luogu.com.cn/problem/P1983">P1983 车站分级</a></p>
<p>虚点连边只是听起来很高大上的操作，但实际上很简单。</p>
<p>对于有边权的情况，虚点连得边的边权需要注意(一般为 0 )</p>
<h2 id="线段树优化建边"><a class="markdownIt-Anchor" href="#线段树优化建边"></a> 线段树优化建边</h2>
<p>说到优化建边，就一定要介绍一下线段树优化建边了。</p>
<p>这也是一个听起来非常高大上但实际上不是很难的技巧。</p>
<p>给你一个点 X ，让你和一个点集里的每一个点都连一条边。看起来并没有什么好方法，只能乖乖地一个一个连</p>
<p>如果这个点集是连续的呢？我们就可以用线段树来优化建边了。</p>
<p>我们知道线段树是这个结构的</p>
<p><img src="https://z4a.net/images/2019/02/25/k4.png" alt="" /></p>
<p>我们知道，线段树的点是能够代表一段区间的，那么我们怎样应用这个性质呢？</p>
<p>首先，我们需要对于线段树的每个父亲与他的儿子建一条单向边，效果如下</p>
<p><img src="https://z4a.net/images/2019/02/25/k5.png" alt="" /></p>
<p>这有什么用呢？因为我们所要求的点集是一段连续的区间，而线段树的结点可以表示某一段区间，我们可以在线段树上找到对应的区间，然后向线段树上的点建边，就可以加快建边速度了。</p>
<p>例如我们要向 [1,8] 里的所有点建边，我们只需要将 X 和线段树上 [1,8] 那个点连一条单向边就可以了。</p>
<p>[2,6] 的例子</p>
<p><img src="https://z4a.net/images/2019/02/25/k6.png" alt="" /></p>
<p>我们在线段树上的边边权一般都是 0 ，边权直接赋给 X 连到线段树上的那条边即可</p>
<p>建树和寻找的代码和普通线段树差不多。需要注意的是线段树上结点的编号不要和已有的点重复，最后的结点直接连上该点就好。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        p=l;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    p=++cnt;<span class="comment">//点的编号</span></span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lc[p],l,mid);<span class="built_in">build</span>(rc[p],mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">add</span>(lc[p],p,<span class="number">0</span>);<span class="built_in">add</span>(rc[p],p,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line">        <span class="built_in">add</span>(x,p,z);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line">        <span class="built_in">update</span>(lc[p],l,mid,x,L,R,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(rc[p],mid+<span class="number">1</span>,r,x,L,R,z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>例题 <a href="https://www.luogu.org/problemnew/show/CF786B">CF786B Legacy</a></p>
<p>这道题还涉及到了区间向某一个点连边的情况，我们再建一个棵线段树在树上反向建边就可以了</p>
<h2 id="拆点构图"><a class="markdownIt-Anchor" href="#拆点构图"></a> 拆点构图</h2>
<p>有些时候我们并不能用一个点来代表一个点（雾）</p>
<p>诶我不是这个意思。我的意思是用几个点来表示一个点的不同情况。</p>
<p>随机口胡的一道题</p>
<p>一个图，每条边上有 k 个权值，第 i 次行走消耗的代价是第 i%k+1 个权值，求某一个点的单源最短路径。 ( k很小)</p>
<p>看起来直接跑 dij 和 spfa 是不对的，可以自举反例。</p>
<p>可以使用 dfs ，用 dis[i][j] 表示到第 i 个点走了 m 步且 m%k+1=j 的最短方案，但这样太慢了。</p>
<p>我们可以使用拆点的思想，对于一个点 i ，将它拆为 i , i+n , i+2*n , … 这样的 k 个点，作为到这个点的步数模 k 不同情况的替代点。</p>
<p>然后我们连边的时候对某一种情况赋不同情况的权值，大概下面这样？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们要对 x 到 y 连三种边 w1 w2 w3</span></span><br><span class="line"><span class="built_in">add</span>(x,y+n,w1);</span><br><span class="line"><span class="built_in">add</span>(x+n,y+<span class="number">2</span>*n,w2);</span><br><span class="line"><span class="built_in">add</span>(x+<span class="number">2</span>*n,y,w3);</span><br></pre></td></tr></table></figure>
<p>来一张图</p>
<p><img src="https://z4a.net/images/2019/02/25/k7.png" alt="" /></p>
<p>然后在得到的图上跑最短路就可以了，答案要枚举到终点的情况。</p>
<p>类似的例题 <a href="https://www.luogu.org/problemnew/show/P4568">P4568 飞行路线</a></p>
<h2 id="图论建模"><a class="markdownIt-Anchor" href="#图论建模"></a> 图论建模</h2>
<p>似乎……一些背包问题可以用最短路解决，只是没什么必要。</p>
<h4 id="let-us-ac-it题面"><a class="markdownIt-Anchor" href="#let-us-ac-it题面"></a> Let us AC it–题面</h4>
<p>Kodak开了一家小店赚外快，因为店小，所以只有 n 种不同价格的商品卖，不过好在批发商给力，货源充足，所以每种商品都有无限件。</p>
<p>因为各种原因，有时候顾客会对购买的总价有特殊的要求，比如计算机科学家泰玛仕一定要总价 1024 ，给小姐姐买礼物的面包需要总价 520 或者 1314 ，或者纯粹来找茬的张三要买0元商品</p>
<p>但是Kodak店里不一定有 1 元的商品，所以并不是所有价格都凑得出来，所以他需要一个程序解决能知道某一个总价能否凑出</p>
<p>看起来可以用完全背包解决这个问题，但是这道题的数据范围不太友好。</p>
<p>商品数 N &lt;= 1000  \  商品价格 a_i &lt;= 20000<br />
顾客数 M &lt;= 300000  \ 需求价格 b_i &lt;= 40000000</p>
<p>如果打完全背包，复杂度会爆炸。TAT</p>
<p>其实这个问题就是 a_1<em>x_1+a_2</em>x_2+a_3*x_3+…?=k 的问题。我们考虑 “同余 + 最短路”</p>
<p>依题意得，如果 k 满足要求，那么 a_m<em>k 必定也满足条件。我们可以先给它填一堆 a_m ，然后减去 p 个 a_m ，用剩下的 a_i 表示 p</em>a_m+k%a_m 设当 b%a_m=i时，需要的最小的 k×a_m+i 为 dis[i] ，剩下的即可用最短路的思想来更新，</p>
<p>跑最短路的过程基本如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">    <span class="type">int</span> x=q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(v[x]) <span class="keyword">continue</span>;</span><br><span class="line">    v[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> y=(x+a[i])%mod;</span><br><span class="line">        <span class="keyword">if</span>(dis[y]&gt;dis[x]+a[i])&#123;</span><br><span class="line">            dis[y]=dis[x]+a[i];</span><br><span class="line">            q.<span class="built_in">push</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可能不是太好理解，结合样例手推一下吧</p>
<hr />
<h4 id="又一道例题"><a class="markdownIt-Anchor" href="#又一道例题"></a> 又一道例题</h4>
<p>给出 n 个 长度为 m 的 01 串，让你确定一个长度相同的 01 串，该串和给出的串中不同的位数最多。</p>
<p>一道看起来跟图论毫无关系的题，其实也可以当作图论来做</p>
<p>我们可以建一个 2^m 的图，每个点都与和自身不同位数为 1 的点连一条长度为 1 的边，然后跑 bfs，得到最远距离的那个点即为所求。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(h&lt;=t)&#123;</span><br><span class="line">    <span class="type">int</span> x=v[h];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> z=x^(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">if</span>(f[z]==<span class="number">0</span>)&#123;</span><br><span class="line">            f[z]=<span class="number">1</span>;</span><br><span class="line">            t++;</span><br><span class="line">            v[t]=z;</span><br><span class="line">            dis[z]=dis[x]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    h++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这有点类似于前面讲的虚点连边的那道题。</p>
<p>我讲的可能比较菜，可以画图理解。</p>
<h3 id="图论中要注意的坑"><a class="markdownIt-Anchor" href="#图论中要注意的坑"></a> 图论中要注意的坑</h3>
<p>简单列述几个小问题</p>
<ol>
<li>
<p>先看眼是有向图还是无向图，无向图数组开两倍。</p>
</li>
<li>
<p>如果题目中没有声明无自环和重边，需要注意</p>
</li>
<li>
<p>有些遍历的题要考虑环，否则可能死循环，可以使用缩点</p>
</li>
<li>
<p>如果题目中边权小于等于零，要考虑负环、零环的情况</p>
</li>
<li>
<p>跑最短路的时候要赋初值。</p>
</li>
<li>
<p>关于 Spfa ，能不用还是不用吧，毕竟容易被卡。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>图论学习笔记</category>
      </categories>
      <tags>
        <tag>链式前向星</tag>
        <tag>反向建边</tag>
        <tag>虚点连边</tag>
        <tag>线段树优化建边</tag>
        <tag>拆点构图</tag>
        <tag>图论建模</tag>
      </tags>
  </entry>
  <entry>
    <title>Oop_java于Pintia平台的题目合集（编程题）</title>
    <url>/2023/04/30/oop-java%E4%BA%8Epintia%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>本篇章是用于Pintia考试的面向对象程序设计题库复习资料--《编程题》</center>
<span id="more"></span>
]]></content>
      <categories>
        <category>Uni</category>
      </categories>
      <tags>
        <tag>Pintia</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串算法--KMP，字典树</title>
    <url>/2023/04/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95--kmp%EF%BC%8Ctrie-%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>KMP特点：1.  i  不回退  2.  j  回退的位置有讲究  3.构建一个辅助数组（ nxt 数组）来跳过不必要的字符比较，从而提高搜索速度。</p>
<span id="more"></span>
<h1 id="kmp算法"><a class="markdownIt-Anchor" href="#kmp算法"></a> KMP算法</h1>
<blockquote>
<p>实际上，完全没必要从 S​ 的每一个字符开始，暴力穷举每一种情况，Knuth、Morris和 Pratt 对该算法进行了改进，称为 ​ KMP  算法。</p>
</blockquote>
<p>而 KMP 的精髓在于，对于每次失配之后，我都不会从头重新开始枚举，而是根据我已经得知的数据，从某个特定的位置开始匹配；而对于模式串的每一位，都有唯一的“特定变化位置”，这个在失配之后的特定变化位置可以帮助我们利用已有的数据不用从头匹配，从而节约时间。</p>
<p><strong>特点：1.   i  不回退  2.   j  回退的位置有讲究  3.构建一个辅助数组（ nxt 数组）来跳过不必要的字符比较，从而提高搜索速度。</strong></p>
<h2 id="实现流程"><a class="markdownIt-Anchor" href="#实现流程"></a> 实现流程</h2>
<p><img src="https://img2023.cnblogs.com/blog/1452231/202303/1452231-20230327195717908-1728308013.png" alt="image" /></p>
<p><img src="https://img2023.cnblogs.com/blog/1452231/202303/1452231-20230327195854428-439903413.png" alt="" /></p>
<p>为了清楚地表述目的，  T  与  S  失配前的部分作为  T’  来表述，此时寻找下一个开始匹配的标志头。而找到下一个标志头的方式为：</p>
<blockquote>
<p>找到   T’  的最长相同前缀与后缀</p>
</blockquote>
<p><img src="https://img2023.cnblogs.com/blog/1452231/202303/1452231-20230327200218970-204893744.png" alt="image" /></p>
<p><img src="https://img2022.cnblogs.com/blog/1452231/202207/1452231-20220725200649652-71907780.png" alt="image" /></p>
<p><font color=red>这样找所有的前缀和后缀比较，是不是也是暴力穷举？那该怎么办呢？<br></br>ans:当然是要用到动态规划递推啦。</font></p>
<h3 id="构建-nxt-数组"><a class="markdownIt-Anchor" href="#构建-nxt-数组"></a> 构建 Nxt 数组</h3>
<p>nxt  数组用于表示当前字符匹配失败时，模式串应该回退到哪个位置。对于模式串 p ，我们遍历其每个字符，并用一个指针  j  表示已匹配的字符数。当模式串中的两个字符匹配时，我们更新指针 j 的值，否则，我们回退  j  到  nxt[j]  的位置。通过这种方式，我们可以为模式串构建一个  nxt  数组，其中  nxt[i]  表示当模式串中第  i  个字符匹配失败时，应该回退到的位置。</p>
<h3 id="实际字符匹配过程"><a class="markdownIt-Anchor" href="#实际字符匹配过程"></a> 实际字符匹配过程</h3>
<p>我们使用两个指针  i  和  j  分别遍历原字符串  s  和模式串  p  。如果当前字符匹配，则同时移动  i  和  j  。如果字符不匹配，我们根据  nxt  数组回退  j  的位置，直到找到匹配的字符或回退到模式串的开头。当  j  等于模式串长度  m  时，表示找到了一个匹配，输出匹配位置，并将  j  重置为  0  。</p>
<h2 id="模板代码实现"><a class="markdownIt-Anchor" href="#模板代码实现"></a> 模板代码实现</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e+6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> nxt[N], n, m;</span><br><span class="line"><span class="type">char</span> p[N], s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s + <span class="number">1</span> &gt;&gt; m &gt;&gt; p + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// build next arraylist</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        nxt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// marry the str</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i  = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">            cout &lt;&lt; i - m &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="字典树又名trie树-前缀树"><a class="markdownIt-Anchor" href="#字典树又名trie树-前缀树"></a> 字典树(又名Trie树、前缀树)</h1>
<p>字典树是一种高效的字符串数据结构，尤其适用于处理大量字符串的时候，它通过将<strong>字符串的公共前缀合并在一起</strong>，节省空间并提高查询速度。</p>
<h2 id="实现流程-2"><a class="markdownIt-Anchor" href="#实现流程-2"></a> 实现流程</h2>
<h3 id="初始化变量和数据结构"><a class="markdownIt-Anchor" href="#初始化变量和数据结构"></a> 初始化变量和数据结构</h3>
<p>定义一个字典树结构（ tree 数组）和一个记录字符串出现次数的数组（ vis 数组）。同时定义一个计数器  flag  用于记录字典树中节点的数量。二维数组  tree  表示字典树的结构，其中  tree[i][j]  表示第  i  个节点的第  j  个子节点。</p>
<h3 id="子功能实现"><a class="markdownIt-Anchor" href="#子功能实现"></a> 子功能实现</h3>
<h4 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> insert</h4>
<p>实现一个  insert  函数，用于向字典树中插入一个字符串。它遍历字符串中的每个字符，将字符转换为数组下标（通过减去’  a  '并加上  1  ）。如果当前字符对应的子节点不存在，则创建一个新的节点并更新节点计数器。最后，在字符串末尾的节点中，更新字符串出现的次数。</p>
<h4 id="query"><a class="markdownIt-Anchor" href="#query"></a> query</h4>
<p>实现一个  query  函数，用于查询字典树中字符串的出现次数。它遍历字符串中的每个字符，将字符转换为数组下标。如果当前字符对应的子节点不存在，说明字符串不存在，查询结束。否则，将指针移动到子节点。最后，返回字符串末尾节点对应的出现次数。</p>
<h3 id="主程序逻辑"><a class="markdownIt-Anchor" href="#主程序逻辑"></a> 主程序逻辑</h3>
<p>读取操作数量  n  ，然后循环处理每个操作。对于每个操作，读取操作类型（  ope  ）和操作字符串（  str  ）。如果操作类型为 &quot; i &quot; ，调用  insert  函数插入字符串；如果操作类型为其他（例如查询操作），调用  query  函数查询字符串，并输出查询结果。</p>
<h2 id="模板代码实现-2"><a class="markdownIt-Anchor" href="#模板代码实现-2"></a> 模板代码实现</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e+6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, flag = <span class="number">1</span>;</span><br><span class="line">string ope, str;</span><br><span class="line"><span class="type">int</span> tree[N][<span class="number">27</span>], vis[N][<span class="number">27</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = str[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (tree[pos][tmp] == <span class="number">0</span>) tree[pos][tmp] = flag ++;</span><br><span class="line">        pos = tree[pos][tmp];</span><br><span class="line">    &#125;</span><br><span class="line">    vis[pos][tmp] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i  = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = str[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (tree[pos][tmp] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        pos = tree[pos][tmp];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vis[pos][tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; ope &gt;&gt; str;</span><br><span class="line">        <span class="keyword">if</span> (ope == <span class="string">&quot;i&quot;</span>) <span class="built_in">insert</span>(str);</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">query</span>(str) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法学习笔记</category>
      </categories>
      <tags>
        <tag>KMP</tag>
        <tag>字典树</tag>
      </tags>
  </entry>
  <entry>
    <title>数论学习笔记</title>
    <url>/2023/04/24/%E6%95%B0%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>数论是 Crypto 中很重要的一部分，然而我基本不会，所以从现在开始我要成为数论糕手！</center>
<hr />
<span id="more"></span>
<h3 id="欧几里得"><a class="markdownIt-Anchor" href="#欧几里得"></a> 欧几里得</h3>
<p>算是数论最基本的了吧，求两个数的最大公约数。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mrow><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi mathvariant="normal">b</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\gcd(a,b)=\begin{cases}
a &amp; b=0 \\
\gcd(b,a\ \rm{mod}\ b) &amp; b\neq 0
\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span><span class="mspace"> </span><span class="mord mathrm">b</span><span class="mclose">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顺便求两个数的最小公倍数。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">l</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">m</mi></mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\rm lcm}(a,b)=\frac{a*b}{\gcd(a,b)} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">l</span><span class="mord mathrm">c</span><span class="mord mathrm">m</span></span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>写程序时先除后乘防炸。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩展欧几里得"><a class="markdownIt-Anchor" href="#扩展欧几里得"></a> 扩展欧几里得</h3>
<p>扩展欧几里得 <code>exgcd</code> 可以在求出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 的同时求出二元一次不定方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax+by=\gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>的一组整数解。</p>
<p>举个栗子，求 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>47</mn><mo separator="true">,</mo><mn>30</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\gcd(47,30)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord">4</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 时，得到以下式子。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>47</mn><mo>=</mo><mn>30</mn><mo>∗</mo><mn>1</mn><mo>+</mo><mn>17</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>30</mn><mo>=</mo><mn>17</mn><mo>∗</mo><mn>1</mn><mo>+</mo><mn>13</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>17</mn><mo>=</mo><mn>13</mn><mo>∗</mo><mn>1</mn><mo>+</mo><mn>4</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>13</mn><mo>=</mo><mn>4</mn><mo>∗</mo><mn>3</mn><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
&amp; 47=30*1+17 \\
&amp; 30=17*1+13 \\
&amp; 17=13*1+4 \\
&amp; 13=4*3+1 \\
\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.249999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.7499999999999996em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">4</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">7</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">3</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>把余数移到左边</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>17</mn><mo>=</mo><mn>47</mn><mo>+</mo><mn>30</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>13</mn><mo>=</mo><mn>30</mn><mo>+</mo><mn>17</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>4</mn><mo>=</mo><mn>17</mn><mo>+</mo><mn>13</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>1</mn><mo>=</mo><mn>13</mn><mo>+</mo><mn>4</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
&amp; 17=47+30*(-1) \\
&amp; 13=30+17*(-1) \\
&amp; 4=17+13*(-1) \\
&amp; 1=13+4*(-3) \\
\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.249999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.7499999999999996em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">3</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>47</mn><mo separator="true">,</mo><mn>30</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\gcd(47,30)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord">4</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 开始，将四个式子依次带入，得</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>47</mn><mo separator="true">,</mo><mn>30</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>13</mn><mo>∗</mo><mn>1</mn><mo>+</mo><mn>4</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>13</mn><mo>∗</mo><mn>1</mn><mo>+</mo><mo stretchy="false">[</mo><mn>17</mn><mo>+</mo><mn>13</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>13</mn><mo>∗</mo><mn>4</mn><mo>+</mo><mn>17</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>17</mn><mo>∗</mo><mn>3</mn><mo>+</mo><mn>13</mn><mo>∗</mo><mn>4</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>17</mn><mo>∗</mo><mn>3</mn><mo>+</mo><mo stretchy="false">[</mo><mn>30</mn><mo>+</mo><mn>17</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>∗</mo><mn>4</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>17</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>7</mn><mo stretchy="false">)</mo><mo>+</mo><mn>30</mn><mo>∗</mo><mn>4</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>30</mn><mo>∗</mo><mn>4</mn><mo>+</mo><mn>17</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>7</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>30</mn><mo>∗</mo><mn>4</mn><mo>+</mo><mo stretchy="false">[</mo><mn>47</mn><mo>+</mo><mn>30</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>7</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>30</mn><mo>∗</mo><mn>11</mn><mo>+</mo><mn>47</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>7</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>47</mn><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mn>7</mn><mo stretchy="false">)</mo><mo>+</mo><mn>30</mn><mo>∗</mo><mn>11</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \gcd(47,30) \\ &amp; =1 \\ &amp; =13*1+4*(-3) \\ &amp; =13*1+[17+13*(-1)]*(-3) \\ &amp; =13*4+17*(-3) \\ &amp; =17*3+13*4 \\ &amp; =17*3+[30+17*(-1)]*4 \\ &amp; =17*(-7)+30*4 \\ &amp; =30*4+17*(-7) \\ &amp; =30*4+[47+30*(-1)]*(-7) \\ &amp; =30*11+47*(-7) \\ &amp; =47*(-7)+30*11 \\ \end{aligned} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:18em;vertical-align:-8.75em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:9.25em;"><span style="top:-11.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-9.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-8.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-6.749999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-5.249999999999999em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.7499999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.2499999999999982em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-0.7499999999999987em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:0.7500000000000009em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:2.250000000000001em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:3.750000000000001em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:5.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.75em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:9.25em;"><span style="top:-11.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord">4</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-9.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-8.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">3</span><span class="mclose">)</span></span></span><span style="top:-6.909999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">3</span><span class="mclose">)</span></span></span><span style="top:-5.409999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">3</span><span class="mclose">)</span></span></span><span style="top:-3.9099999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span></span></span><span style="top:-2.4099999999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span></span></span><span style="top:-0.9099999999999988em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span></span></span><span style="top:0.5900000000000007em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">7</span><span class="mclose">)</span></span></span><span style="top:2.0900000000000007em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">7</span><span class="mclose">)</span></span></span><span style="top:3.5900000000000007em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">7</span><span class="mclose">)</span></span></span><span style="top:5.09em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.75em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>解得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><mn>7</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mn>11</mn></mrow><annotation encoding="application/x-tex">x=-7,y=11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span></span></span></span>。</p>
<p>由上述式子可观察到，每次辗转交换了 <code>x</code> 和 <code>y</code>，并将 <code>y</code> 减去了原 <code>x</code> 与辗转相除所得商的乘积。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> g, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        g = a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">exgcd</span>(b, a % b, g, y, x);</span><br><span class="line">        y -= x * (a / b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="eratosthenes-筛法"><a class="markdownIt-Anchor" href="#eratosthenes-筛法"></a> Eratosthenes 筛法</h3>
<p>在筛选之前，先认为每个数都是素数。枚举所有数，如果这个数是素数，那么筛掉这个数的所有倍数，标记它们为“不是素数”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> isNotPrime[MAXN + <span class="number">1</span>];</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getPrimes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNotPrime[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i * <span class="number">2</span>; j &lt;= n; j += i) isNotPrime[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primes.<span class="built_in">reserve</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span> (!isNotPrime[i]) primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个优化：</p>
<ol>
<li>第二层循环可以从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">i^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 开始，因为对于每个小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 的数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">i&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∗</mo><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">i*i&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> 都已经在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">i&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> 次循环筛掉了。</li>
<li>枚举 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2,\sqrt{n}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 的素数即可，因为对于每个合数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&gt;</mo><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">p&gt;\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>，则必有素数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mi>k</mi><mo>∗</mo><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p=k*k&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>&lt;</mo><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">k&lt; \sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 会在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 次循环被筛掉。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> isNotPrime[MAXN + <span class="number">1</span>];</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getPrimes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n + <span class="number">0.5</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNotPrime[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i * i; j &lt;= n; j += i) isNotPrime[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primes.<span class="built_in">reserve</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span> (!isNotPrime[i]) primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h3>
<p>根据唯一分解定理，任何一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 都可以写成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个素数的幂的积的形式，其中第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个素数的指数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。即：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mtext> </mtext><msup><msub><mi>p</mi><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub></msup></mrow><annotation encoding="application/x-tex">n={\prod_{i=1}^{k}} \ {p_i}^{a_i} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>根据容斥原理，从总数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 中先减去每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的倍数，再把多减的补回来，再把多补的减回来 …… 最终得到公式</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><munder><mo>∑</mo><mrow><mi>S</mi><mo lspace="0em" rspace="0em">⊆</mo><mo stretchy="false">{</mo><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>p</mi><mi>k</mi></msub><mo stretchy="false">}</mo></mrow></munder><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow></msup></mrow><mo>∗</mo><mfrac><mi>n</mi><mrow><munder><mo>∏</mo><mrow><msub><mi>p</mi><mi>i</mi></msub><mo lspace="0em" rspace="0em">∈</mo><mi>S</mi></mrow></munder><mtext> </mtext><msub><mi>p</mi><mi>i</mi></msub></mrow></mfrac></mrow></mrow><annotation encoding="application/x-tex">\phi(n)={\sum_{S{\subseteq}\{p_1,p_2,\ldots,p_k\}}{(-1)^{|S|}} * {\frac{n}{ {\prod_{ {p_i}{\in}S} } \ p_i }}} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.623565em;vertical-align:-1.516005em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.808995em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mtight"><span class="mrel mtight">⊆</span></span><span class="mopen mtight">{</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="minner mtight">…</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mclose mtight">}</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516005em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mrel mtight">∈</span></span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1218180000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></span></p>
<p>把求和和容斥原理的应用全部展开之后就是</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>∗</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)=n*\prod_{i=1}^{k} (1 - \frac{1}{p_i}) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>程序实现就是先令结果为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，每次把结果除掉一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 再乘上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。嗯，不是很好理解 ……</p>
<p>对于给定的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，用类似筛法的思想枚举素数，每次找到一个素数后把它的倍数全部筛掉。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n + <span class="number">0.5</span>)), ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>); <span class="comment">// 前面没筛干净的</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>未完待续 ……</p>
]]></content>
      <categories>
        <category>数论学习笔记</category>
      </categories>
      <tags>
        <tag>Eratosthenes筛法</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析数论--埃氏筛/欧拉筛/杜教筛</title>
    <url>/2018/01/24/%E6%B5%85%E6%9E%90%E6%95%B0%E8%AE%BA-%E5%9F%83%E6%B0%8F%E7%AD%9B-%E6%AC%A7%E6%8B%89%E7%AD%9B-%E6%9D%9C%E6%95%99%E7%AD%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>质数的判定试除法 or 六倍原理、埃氏筛(稍加优化版的筛法)、线性筛</center>
<span id="more"></span>
<h2 id="0x01-绪论"><a class="markdownIt-Anchor" href="#0x01-绪论"></a> 0x01 绪论</h2>
<h3 id="质数的判定试除法-or-六倍原理"><a class="markdownIt-Anchor" href="#质数的判定试除法-or-六倍原理"></a> 质数的判定试除法 or 六倍原理</h3>
<p>一个合数的约数总是成对出现的，如果  d|n  (  d  能被  n  整除），那么  (n/d)|n  ，因此我们判断一个数是否为质数的时候，<br />
只需要判断较小的那一个数能否整除n就行了，即只需枚举  d&lt;=(n/d)  ，即  d&lt;=n  ，  d&lt;=sqrt(n)  就行了。</p>
<p>为何不用  sqrt()  ？请自行百度“  sqrt()  的运算方式”。你就会知道他是一个很慢的函数。</p>
<h4 id="试除法判断素数"><a class="markdownIt-Anchor" href="#试除法判断素数"></a> 试除法判断素数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )<span class="comment">//核心代码</span></span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="试除法分解质因数唯一分解定理"><a class="markdownIt-Anchor" href="#试除法分解质因数唯一分解定理"></a> 试除法分解质因数（<a href="https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/10920095?fromtitle=%E5%94%AF%E4%B8%80%E5%88%86%E8%A7%A3%E5%AE%9A%E7%90%86&amp;fromid=23680898&amp;fr=aladdin">唯一分解定理</a>）</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i， s ++ ;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="一个合数分解而成的质因数最多只包含一个大于-sqrtn-的质因数"><a class="markdownIt-Anchor" href="#一个合数分解而成的质因数最多只包含一个大于-sqrtn-的质因数"></a> 一个合数分解而成的质因数最多只包含一个大于 sqrt(n)  的质因数。</h4>
<blockquote>
<p>反证法，若 n 可以被分解成两个大于 sqrt(n) 的质因数，则这两个质因数相乘的结果大于 n ，与事实矛盾</p>
</blockquote>
<h4 id="当枚举到某一个数-i-的时候-n-的因子里面已经不包含-2-i-1-里面的数"><a class="markdownIt-Anchor" href="#当枚举到某一个数-i-的时候-n-的因子里面已经不包含-2-i-1-里面的数"></a> 当枚举到某一个数  i  的时候，  n  的因子里面已经不包含  2-i-1  里面的数，</h4>
<p>如果  n%i==0  ，则  i  的因子里面也已经不包含  2-i-1  里面的数，因此每次枚举的数都是质数.</p>
<h4 id="算数基本定理唯一分解定理任何一个大于1的自然数-n-如果-n-不为质数那么-n-可以唯一分解成有限个质数的乘积"><a class="markdownIt-Anchor" href="#算数基本定理唯一分解定理任何一个大于1的自然数-n-如果-n-不为质数那么-n-可以唯一分解成有限个质数的乘积"></a> 算数基本定理(唯一分解定理):任何一个大于1的自然数  N  ，如果  N  不为质数，那么  N  可以唯一分解成有限个质数的乘积</h4>
<p>N=P_1 * a_1P2a2P3a3…Pnan ，这里  P1&lt;P2&lt;P3…&lt;Pn  均为质数，其中指数  ai  是正整数。<br />
这样的分解称为   N   的标准分解式。最早证明是由欧几里得给出的，由陈述证明。<br />
此定理可推广至更一般的交换代数和代数数论。</p>
<p>质因子（或质因数）在数论里是指能整除给定正整数的质数。根据算术基本定理，不考虑排列顺序的情况下，</p>
<p>每个正整数都能够以唯一的方式表示成它的质因数的乘积。</p>
<p>两个没有共同质因子的正整数称为互质。因为  1  没有质因子，  1  与任何正整数（包括  1  本身）都是互质。</p>
<p>只有一个质因子的正整数为质数。</p>
<h2 id="质数筛法"><a class="markdownIt-Anchor" href="#质数筛法"></a> 质数筛法</h2>
<h3 id="朴素筛法"><a class="markdownIt-Anchor" href="#朴素筛法"></a> 朴素筛法</h3>
<h4 id="做法"><a class="markdownIt-Anchor" href="#做法"></a> 做法</h4>
<p>把 2~(n-1) 中的所有的数的倍数都标记上，最后没有被标记的数就是质数.</p>
<h4 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h4>
<p>假定有一个数  p  未被  2~(p-1)  中的数标记过，那么说明，不存在  2~(p-1)  中的任何一个数的倍数是  p  ，也就是说  p  不是  2~(p-1)  中的任何数的倍数，也就是说  2~(p-1)  中不存在p的约数，因此，根据质数的定义可知:<code>p是质数</code></p>
<h4 id="调和级数"><a class="markdownIt-Anchor" href="#调和级数"></a> 调和级数</h4>
<p>当  n  趋近于正无穷的时候，  1/2+1/3+1/4+1/5+…+1/n=lnn+c  .(  c  是欧阳常数，约等于  0.577  左右)</p>
<h4 id="底数越大-log-数越小"><a class="markdownIt-Anchor" href="#底数越大-log-数越小"></a> 底数越大，  log  数越小</h4>
<h4 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h4>
<p>约为  O(nlogn)  (注:此处的  log  数特指以 2 为底的  log  数).</p>
<h3 id="埃氏筛稍加优化版的筛法"><a class="markdownIt-Anchor" href="#埃氏筛稍加优化版的筛法"></a> 埃氏筛(稍加优化版的筛法)</h3>
<h4 id="质数定理"><a class="markdownIt-Anchor" href="#质数定理"></a> 质数定理</h4>
<p>1~n  中有  n / ln(n)  个质数</p>
<h4 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h4>
<p>在朴素筛法的过程中只用质数项去筛</p>
<h4 id="时间复杂度-2"><a class="markdownIt-Anchor" href="#时间复杂度-2"></a> 时间复杂度</h4>
<p>粗略估计:  O(n)  实际:  O(nlog(logn))</p>
<p>1~n  中，只计算质数项的话，  “1/2+1/3+1/4+1/5+…+1/n”  的大小约为  log(logn)</p>
<h3 id="线性筛"><a class="markdownIt-Anchor" href="#线性筛"></a> 线性筛</h3>
<p>若  n  在  10  的  6  次方的话，线性筛和埃氏筛的时间效率差不多，若  n  在  10  的  7  次方的话，线性筛会比埃氏筛快了大概一倍.</p>
<blockquote>
<p>思考:一:线性筛法为什么是线性的?<br />
二:线性筛法的原理是什么?</p>
</blockquote>
<h4 id="核心"><a class="markdownIt-Anchor" href="#核心"></a> 核心</h4>
<p>1~n  内的合数  p  只会被其最小质因子筛掉.</p>
<h4 id="原理-3"><a class="markdownIt-Anchor" href="#原理-3"></a> 原理</h4>
<p>1~n  之内的任何一个合数一定会被筛掉，而且筛的时候只用最小质因子来筛，<br />
然后每一个数都只有一个最小质因子，因此每个数都只会被筛一次，因此线性筛法是线性的.</p>
<p>枚举到  <code>i</code>  的最小质因子的时候就会停下来，即 <code>if(i%primes[j]==0) break;</code><br />
因为从小到大枚举的所有质数，所以当 <code>i%primes[j]!=0</code> 时， <code>primes[j]</code> 一定小于  <code>i</code>  的最小质因子，<code>primes[j]</code> 一定是 <code>primes[j]*i</code> 的最小质因子.<br />
因为是从小到大枚举的所有质数，所以当<code>i%primes[j]==0</code>时，<code>primes[j]</code>一定是   <code>i</code>  的最小质因子，<br />
而 <code>primes[j]</code> 又是 <code>primes[j]</code> 的最小质因子，因此 <code>primes[j]</code> 是 <code>i * primes[j]</code> 的最小质因子.</p>
<h4 id="关于-for-循环的解释"><a class="markdownIt-Anchor" href="#关于-for-循环的解释"></a> 关于  for  循环的解释</h4>
<p>注:首先要把握住一个重点:我们枚举的时候是从小到大枚举的所有质数</p>
<p>1.当 <code>i%primes[j]==0</code> 时，因为是从小到大枚举的所有质数，所以 <code>primes[j]</code> 就是i的最小质因子，而 <code>primes[j]</code> 又是其本身<br />
<code>primes[j]</code>的最小质因子，因此当 <code>i%primes[j]==0</code> 时， <code>primes[j]</code> 是 <code>primes[j]i</code> 的最小质因子.</p>
<p>2.当 <code>i%primes[j]!=0</code> 时，因为是从小到大枚举的所有质数，且此时并没有出现过有质数满足 <code>i%primes[j]==0</code> ，<br />
因此此时的 <code>primes[j]</code> 一定小于 <code>i</code> 的最小质因子，而 <code>primes[j]</code> 又是其本身 <code>primes[j]</code> 的最小质因子，<br />
所以当 <code>i%primes[j]!=0</code> 时， <code>primes[j]</code> 也是 <code>primes[j]i</code> 的最小质因子.</p>
<p>3.综合1，2得知，在内层  for  循环里面无论何时， <code>primes[j]</code> 都是 <code>primes[j]i</code> 的最小质因子，因此 <code>st[primes[j]i]=true</code><br />
语句就是用<code>primes[j]i</code>这个数的最小质因子来筛掉这个数.</p>
]]></content>
      <categories>
        <category>算法学习笔记</category>
      </categories>
      <tags>
        <tag>埃氏筛</tag>
        <tag>欧拉筛</tag>
        <tag>杜教筛</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记--《献给阿吉尔侬的花束》</title>
    <url>/2019/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E7%8C%AE%E7%BB%99%E9%98%BF%E5%90%89%E5%B0%94%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《花束》这出悲剧，与其说是悲伤，不如说是悲壮。Charlie 凭自己一个人，接受了世所罕见的手术实验，体验了绝无仅有的人生落差，并为书中的“后世”留下了宝贵的精神财富。从这个意义上讲，他是一个英雄，因为他用孤独的臂膀撑起了一部人类的史诗。</p>
<span id="more"></span>
<h1 id="这是一本什么书"><a class="markdownIt-Anchor" href="#这是一本什么书"></a> 这是一本什么书？</h1>
<p>首先，《献给阿尔吉侬的花束》是一本小说，严格意义上是通俗科幻类小说，曾获得过 1960 年雨果奖最佳长篇、1966 年星云奖最佳长篇。这两个年度分别是雨果奖和星云奖的第 8 届和第 2 届，因此，《花束》也算是科幻文学领域奠基式的作品。</p>
<p>这些 title 其实足以说明本书的优秀。但其实，《花束》这本书并不算是传统意义上的“硬科幻”（如大家熟知的《三体》），甚至科学层面上也很难与一些熟知的软科幻类作品叫板（例如《降临》、《星际穿越》或是《蝴蝶效应》等）。简而言之，就是本书几乎没讨论过任何科学上的内容，或者作者其实根本没把这个当做重点。本书的科幻部分，更多的则是一座从“作者心中”架往“读者心中”的桥梁而已。</p>
<p>那这本书，又是为何而备受好评的呢？</p>
<p>当你读完这本书，就会发现《花束》的内核，其实是人文关怀。</p>
<p>本书的情节大概可以被简单地概括出来：主角 Charlie Gordon 是一个 IQ 为 68 的低智者，一直在救助中心学习。而某天，因为他认真、努力、诚恳的心态，结合众多因素，一个科学小组选中了他，并通过手术他改造成了智商飞速提高的天才。成为天才之后，他经历了很多未曾经历的事情。而最后，也因为实验本身存在的问题，他的高智商消退、大脑萎缩并撒手人寰。而书名中的“阿尔吉侬”，这是一只同样经历过手术的小鼠，和 Charlie 有着相似的宿命。而本书的标题 <em>Flowers for Algernon</em>，则来源于主角离世前的最后一句话：<code>please if you get a chance put some flowers on Algernons grave in the bak yard</code>。</p>
<p>本书的一大行文特点是通过第一人称“日志”的形式叙述，极大地丰富了感染力。主角从一开始因为智商差距、拼写出来的单词让人啼笑皆非，到智商飞跃后可以使用很长的单词、很复杂的句子，再到最后重新回归拼写错误的状态，让读者也能从另一个角度、更深刻地理解主角的变化。而这种变化极大地震撼了我的心灵（下文中会细讲）。这里先放一段英文原版（第一章），你可以通过这一部分更详细地了解到我想表达的意思。</p>
<p><img src="https://vlilac.gitee.io/images/Eng.jpg" alt="img" /></p>
<p>值得注意的是，作者还比较贴心的将单词错拼成了能自然拼读出的写法，这似乎也从科学上符合“拼写功能低下症”的逻辑——毕竟生活中还是要对话的。例如第一句应该是<code>progress report 1, March 3</code>。类似的你也可以类比一下这一段到底说的什么意思。</p>
<h1 id="思考和延伸"><a class="markdownIt-Anchor" href="#思考和延伸"></a> 思考和延伸</h1>
<p>这一部分是记录我阅读的思考和一些天马行空的延伸。</p>
<h2 id="悲剧内核毁灭和绽放"><a class="markdownIt-Anchor" href="#悲剧内核毁灭和绽放"></a> 悲剧内核：毁灭和绽放</h2>
<p>通读完不难发现，这篇小说的内是一出悲剧。</p>
<p>一种比较常见的解读，用一句比较网红的话来讲，是“如果我不曾见过光明，我便不会绝望于黑暗”。主角 Charlie 经历了从高智商回到低智商的过程，身为读者，读的时候确实能感受出一种绝望的气氛。Charlie 自己是如此形容的：</p>
<blockquote>
<p>我们并不属于相同层级。我在往上攀升时经过你的楼层，现在我在下降途中再次经过，但我想我不会再搭这部升降梯。所以，此时此刻就让我们相互道别。</p>
</blockquote>
<p>命定的结局，转瞬即逝的灵智。这么看来，仿佛是有点日本美学的味道：以毁灭为代价的绽放才是至高的美。本书的逻辑确实是这样的——如果 Charlie 不曾接受手术，或许就会在救助学校里度过一生，会在面包店扫一辈子的地，而不会迎来大脑萎缩的结局。但这并不是“美”的。Charlie 的变化，像极了一个普通人穷极一生换来的一个“绽放”的机会。它告诉我们了，我们的边界在哪里、人类的边界在哪里、美的边界在哪里。从刀耕火种的时代绵延至今，从部落、城邦到国家，探索生存的边界、探索生存意义的边界，一直是人类永恒求索的课题。也正因为一代又一代人薪火相传地探索，人类文明才能不断走向浩瀚的星空。</p>
<h2 id="how-to-become-a-human"><a class="markdownIt-Anchor" href="#how-to-become-a-human"></a> How to become a Human?</h2>
<p>虽然本书是悲剧内核，是“毁灭的绽放”留给人的感叹，但我其实并不认为这是书中最为重要的部分。相反，书中极大的篇幅描述 Charlie 开始飞速提高智商后的情节，才是本书的精髓所在。</p>
<p>Charlie 迅速提高智商后，似乎是变“聪明”了，但实际上他并没有活的更开心。人类社会从来不是智商主导一切的，情商、逆商等具有社交属性的、只能通过后天锻炼培养的，才是人立足于社会的核心要义。而 Charlie 显然不具有这些。所以在最初，他会把所有有关于社交的事情弄得一团糟，他会无法控制情绪。但慢慢地，随着他与社会的交流、与人的交流，他开始逐渐“成为人类”。</p>
<p>这也是我想表达的、这一小节的标题：How to become a human? 如何成为一个人类？这不仅在教育学上有重要意义，在我们个人面对人生时，也有重要的价值。这个问题等价为：用什么标准才能衡量出“人”？——是对“人”本身意义的思考。而正是围绕着这一核心问题，作者仍在叙述过程中抛出了更多值得思考的课题：什么是爱？什么是存在？人是否注定孤独？又该以怎样的态度面对死亡？</p>
<p>我无法准确回答这些问题，或者说，没人能准确回答这些问题——但人类向来擅长思考和追问没有答案的问题，这或许也是这本书的厚度所在。被赋予智商，更像是被赋予了思考这些问题的机会；拼尽所有换来的高智商，若是等效成“拼尽所有换来的入场券”，则似乎能说明一个道理：人类一直在穷尽所有，尝试去解决有关自己的问题。</p>
<p>所以，这份感动，或许不仅是来自于 Charlie 对自己生命的思考，也来自于人类文明持续不断地自我反思——一世如此，世世如斯。</p>
<h2 id="配角思考正常人而已"><a class="markdownIt-Anchor" href="#配角思考正常人而已"></a> 配角思考：正常人而已</h2>
<p>这本书的配角刻画无疑是非常成功的。虽然都没有很多戏份，但是作者用简练的笔触描绘出了正常人该有的样子。我在读的过程中，有时会对一些角色产生厌恶情绪。但直到读完，我发现他们只是正常人而已。</p>
<p>换句话说，配角的戏份更多的是一种对比，是 Charlie “进化”后的“神性”和配角们最为普通的“人性”的对比。Charlie 不具备道德、情感、美学上的神性，仅具有智力上的神性。他像极了一个机器人，有着超乎常人的大脑和精力，唯独少了一颗有血有肉的心。而这部分便由配角递补、完成了使命。面包店的同伴，在 Charlie 变聪明时开始排斥他，又在他变笨时毫无保留地保护他；纪尼安小姐在 Charlie 极端聪明时不得不离开他——因为在他身边会让普通人质疑自己存在的意义——而又在他“坠落”到人类智商时接受他…是的，他们只是正常人而已。</p>
<p>当这份平凡与普通，站在了达到了人类顶峰却依然痛苦的 Charlie 对面时，却显得无比高贵、无比可爱。这便是人性对神性的救赎，更是人类对自己的救赎。</p>
<h1 id="我为何深受触动"><a class="markdownIt-Anchor" href="#我为何深受触动"></a> 我为何深受触动？</h1>
<p>首先，这本书是我 2022/11/30 的夜里突然翻到的，从两点看到六点半，睡了一个小时后起来上体育课，上完体育课又回宿舍继续读，十点左右看完的（实际上体育课上我也一直在偷偷看）。</p>
<p>人们常说，一部完整的文艺作品，一定需要受众加入创作，用自己的体会、体验、思考、情感去丰富作者创造的文艺世界。是的，我认同这一点。因此，这一部分我想着重谈谈我的感受。</p>
<p>我读完有两种感受：悲伤和复杂。悲伤不再赘述，在第二节“思考与延伸”已经叙述的够多了。而复杂呢？这种复杂，无比类似于读完一部完整史诗时的复杂感受，因为这本书，其实记录了 Charlie 的一生。幼年时被当做异类，歇斯底里的母亲，不置可否的父亲，不理不睬的妹妹；成年后充实的“救助学校”生活、空虚的“智商飞跃后”生活，和最终为人类作出不计其数的伟大贡献后归于坟墓——这就是 Charlie 的一生。当我们读完一个人的一生后，便只能长叹一声。</p>
<p>这是一种极其复合的情感，我不知该如何言明。只能尝试先解构成几种基础的感情：</p>
<p>首先，孤独。Charlie 似乎一直没有幸福过，似乎一直孤独。他从低智商飞跃到高智商，又从高智商坠落回低智商：他的每一步，都远离了正常人思考能力的极限范围，要么跌出下限，要么高出上限。这也决定了，没有人能够真正理解他，孤独便是他既定的宿命。这似乎总让我想起我自己、想起我自己的孤独。果然，孤独从来都是自己为自己筑起的藩篱，外界渺小的作用力，从来都是望洋兴叹。</p>
<p>同时，佩服。我称这部小说为“史诗”，因为 Charlie 本身就是英雄式的角色。他看到了别人未曾看到的景色，也拥有了别人未曾有过的遗憾。英雄的形象，在这一刻得到了极其丰满周详的诠释。Pay more, get more.</p>
<p>最后，无奈。Charlie 的一生，又何尝不是无数个普通人的一生？我们都会有“春风得意马蹄疾，一日看尽长安花”的日子，也一定会面临滑铁卢。人生正式由一段段曲折的经历构成的。成功似乎永远只有一刹，不断更替交织的生活，会用时间魔法把一切变为历史。我们只能选择平静地接受一些痛苦折磨、平安喜乐，对此无可奈何，令人感慨叹息。</p>
<h1 id="献给阿尔吉侬的花束"><a class="markdownIt-Anchor" href="#献给阿尔吉侬的花束"></a> 献给阿尔吉侬的花束</h1>
<p>最后的最后，我也希望能够有朝一日，将一束花轻轻放在和 Charlie 有着相似境遇的小鼠——阿尔吉侬的墓前。这不仅仅是在祭奠阿尔吉侬，也是在怀念 Charlie，更是在与我仍未洞悉全貌的人生，互相致意。</p>
<h1 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h1>
<p>阅读时的勾画和简单思考。</p>
<h2 id="近步抱告3"><a class="markdownIt-Anchor" href="#近步抱告3"></a> ◆ 近步抱告—3</h2>
<p>Charlie 虽然低智，但是比绝大多数人都努力。</p>
<blockquote>
<p>纪尼安小姐告诉他我是她在比克曼学校低能成人班中最好的学生。而且我也最用功。因为我真的想要学我比那些更匆名的人还要奴力。</p>
</blockquote>
<p>同上。</p>
<blockquote>
<p>但我没有关西我跟本不怕痛或什么的。因为我很强壮而且我会很奴力。</p>
</blockquote>
<h2 id="近步抱告6"><a class="markdownIt-Anchor" href="#近步抱告6"></a> ◆ 近步抱告—6</h2>
<p>Charlie 在低智商时，对朋友有着超乎寻常的依赖。或许这是身体本能的、对归属感和安全感的渴望。</p>
<blockquote>
<p>我才不管便有名。我只要和其他人一样便匆名。这样我就可以有很多洗欢我的朋友。</p>
</blockquote>
<h2 id="进步报告7"><a class="markdownIt-Anchor" href="#进步报告7"></a> ◆ 进步报告—7</h2>
<p>对变聪明后的生活怀揣着深切的希望，殊不知“便匆名”后并不一定会更快乐。</p>
<blockquote>
<p>匆名的人都在想什么或想以前的什么呢。我猜都是很美妙的是情。我好西望我已经知到许多美妙的是情。</p>
</blockquote>
<h2 id="进步报告8"><a class="markdownIt-Anchor" href="#进步报告8"></a> ◆ 进步报告—8</h2>
<p>哎…</p>
<blockquote>
<p>他们是我的朋友他们都洗欢我。</p>
</blockquote>
<blockquote>
<p>我完的很快乐。我们做游戏。他们让我头上代着灯罩在巴台上跳五。让美个人都笑起来。</p>
</blockquote>
<h2 id="进步报告9"><a class="markdownIt-Anchor" href="#进步报告9"></a> ◆ 进步报告—9</h2>
<p>这个地方其实是圈子里的女性朋友发现了大家都在欺负 Charlie，但 Charlie 依然把他们当做朋友。她去厕所哭了。</p>
<blockquote>
<p>我说我所有的朋友都很聪明。而且他们都很好。他们喜欢我。从来不会对我做不好的事情。然后有东西进去她的眼睛。她必须跑去女士的洗手间。</p>
</blockquote>
<p>拼写和语法开始变得正确</p>
<blockquote>
<p>我弄清楚标点符号的作用后，我把过去的进步报告从头读了一次。天哪，我的拼音与标点符号可真疯狂！</p>
</blockquote>
<p>Charlie 第一次发现所谓“朋友”的“笑”，其实不怀好意。</p>
<blockquote>
<p>这就是乔和其他人正在做的事，他们在嘲笑我。和我玩捉迷藏的小朋友是在作弄我，他们一样是在嘲笑我。派对上的人像是一堆向下张望的模糊面孔，每张脸都对着我嘲笑。</p>
</blockquote>
<p>有了性意识。这么看来，似乎“繁殖”这一生物的重大使命，站在自然选择的角度来讲，更倾向于智商高的人吧。</p>
<blockquote>
<p>我梦到那位和我跳舞并且在我身上搓摩的女孩艾伦，当我醒过来时，床单湿了，而且一团乱。</p>
</blockquote>
<p>模糊的记忆开始聚合。</p>
<blockquote>
<p>看到面包店所在的那条街，起初有些模糊，然后逐渐零零落落地拼凑起来，有些部分变得非常真实，现在明确地呈现在我眼前，只是其他部分依旧模糊，而我也不确定……</p>
</blockquote>
<h2 id="进步报告10"><a class="markdownIt-Anchor" href="#进步报告10"></a> ◆ 进步报告—10</h2>
<p>批判性思维的萌芽。</p>
<blockquote>
<p>现在我知道上大学和接受教育的最重要理由之一，是去了解你以前一直相信的事情并非真实，而且任何东西都不能只靠外表来决定。</p>
</blockquote>
<h2 id="进步报告11"><a class="markdownIt-Anchor" href="#进步报告11"></a> ◆ 进步报告—11</h2>
<p>理性与感性的碰撞，批判性思维的觉醒。</p>
<blockquote>
<p>但我写下这些事情时，我的内在却有个声音在对我大吼，告诉我不是如此。我是个人，在接受手术之前，就已经是个人，我必须去爱别人。</p>
</blockquote>
<p>逐渐开始理解谎言的普遍性，以及一些问题的答案如果不会带来任何好处，就不必要问。</p>
<blockquote>
<p>我再也不想知道实情。</p>
</blockquote>
<p>是的，人生中绝大多数问题都无比复杂，没有简单的解析解。</p>
<blockquote>
<p>然而，金皮只是个员工，他有三个孩子要养，如果唐纳把他开除，他要怎么办？他可能再也找不到工作，特别是他还有条畸形的腿。</p>
<p>我应该为此忧虑吗？</p>
<p>怎么做才对？讽刺的是，我所有的聪明才智也无法帮我解决这道难题。</p>
</blockquote>
<h2 id="进步报告12"><a class="markdownIt-Anchor" href="#进步报告12"></a> ◆ 进步报告—12</h2>
<p>深刻。</p>
<blockquote>
<p>讲话与书写都应该力求简单与直接，好让别人能够了解。他要我注意，语言有时是一种障碍，不是通路。说起来很讽刺，我现在竟然是落在智识藩篱的另一边。</p>
</blockquote>
<p>父亲一直把查理当作真正的“人”来看待。</p>
<blockquote>
<p>马特指着站在墙边的查理：“你忘了自己告诉过儿子，他不能养狗，因为我们空间不够，也没人能照顾狗。记得了吗？他那时候要求养狗时，你对他说的话不算数了吗？”</p>
<p>“可是我可以自己照顾我的狗，”</p>
</blockquote>
<h2 id="进步报告13"><a class="markdownIt-Anchor" href="#进步报告13"></a> ◆ 进步报告—13</h2>
<p>极端的母亲，不幸的童年。但其实母亲一开始也是怀揣希望的，逐渐被现实逼迫的歇斯底里起来…</p>
<blockquote>
<p>直到诺尔玛的出生证明她也能生出正常的孩子，我只是个异数后，她才不再想改变我。</p>
</blockquote>
<p>弥补了情感上的缺憾。</p>
<blockquote>
<p>照理说我应该痛恨他对我做的那些事，还有他利用罗丝和马特的行为，可是我无法恨他。在那第一天之后，他一直对我很好，总是拍拍我的肩膀、微笑，说些我难得听闻的鼓励话语。</p>
<p>即使在那时候，他也把我当人看待。</p>
</blockquote>
<p>对研究人员的新思考，批判而感到冒犯。</p>
<blockquote>
<p>他和其他人犯下同样的错误，他们嘲笑弱智者，因为他们不了解对方也是人类。他不能体会，我来这里之前就已经是个人。</p>
</blockquote>
<blockquote>
<p>所以，伯特称赞尼姆与斯特劳斯全心投入在一些重要且不确定的事物上，而不是找些安全但不重要的东西研究，他说得没有错。</p>
</blockquote>
<blockquote>
<p>大家谈到我时，却都把我当作某种为科学发表而创造出的东西。</p>
</blockquote>
<h2 id="进步报告14"><a class="markdownIt-Anchor" href="#进步报告14"></a> ◆ 进步报告—14</h2>
<p>是在说阿尔吉侬，也是在说 Charlie。</p>
<blockquote>
<p>它不需要食物或饮水来激发学习，它似乎是为了解决问题而学习，显然成就感就已经是种回报。</p>
</blockquote>
<p>这其实是很重要的成长过程。查理通过飞速学习建立起的认知，一定是有秩序的。但现实生活中的秩序却往往掩盖在混乱的最深层，所以学会生活，首先要学会接受混乱和无序。</p>
<blockquote>
<p>她笑我还需要锁门，我则笑她屋里的一团混乱。她警告我别想改变她</p>
</blockquote>
<blockquote>
<p>我从未认识像费伊这样开放并信赖别人的人，她是我此刻最需要的人，因为我一直渴盼有单纯的人际接触。</p>
</blockquote>
<h2 id="进步报告16"><a class="markdownIt-Anchor" href="#进步报告16"></a> ◆ 进步报告—16</h2>
<p>作者的思考。</p>
<blockquote>
<p>一种认命的无奈感。人们绝口不谈复健、治疗，或是把病人重新送回世界，没有人谈到希望。那种感觉就像活生生的死亡……或是更糟，根本不曾充分活着与了解。灵魂从一开始就在枯萎，并注定要对着每一天的时间与空间凝望。</p>
</blockquote>
<blockquote>
<p>然而，你为我做的事尽管美妙，你却没有权利可以像实验动物一样对待我。我现在是个独立的个人，但查理在走进实验室前，同样也是独立的个人。</p>
</blockquote>
<blockquote>
<p>如果没有人性情感的调和，智慧与教育根本毫无价值</p>
</blockquote>
<p>更高的进化历程：感性具有了对自我的批判，是自我反思的源泉。</p>
<blockquote>
<p>我低头看自己，然后看到自己真正变成的模样。我觉得羞耻。</p>
</blockquote>
<blockquote>
<p>讽刺的是，我们兄妹两人聊到母亲时，口气就像她不在现场，但其实她就在房间里。</p>
</blockquote>
<blockquote>
<p>我曾经梦想过这种时刻，此刻虽身历其境，但有什么用呢？我不能把自己即将面对的遭遇告诉她，而且，我能够接受这种出于虚假前提的亲情吗？如果我还是以前那个弱智、需要倚赖别人的查理，她势必会以不同方式和我说话。所以，我现在有什么权利可以要求呢？我的面具很快就会被撕掉。</p>
</blockquote>
<blockquote>
<p>这是我一直想扮演的角色……大哥。</p>
</blockquote>
<h2 id="进步报告17"><a class="markdownIt-Anchor" href="#进步报告17"></a> ◆ 进步报告—17</h2>
<p>Charlie 在坠落了…</p>
<blockquote>
<p>我们并不属于相同层级。我在往上攀升时经过你的楼层，现在我在下降途中再次经过，但我想我不会再搭这部升降梯。所以，此时此刻就让我们相互道别。</p>
</blockquote>
<blockquote>
<p>艾丽斯在身边的唯一坏处，是我觉得现在必须对抗这件事。我想要停下时间，把自己冻结在这个层级，绝不放她走。</p>
</blockquote>
<blockquote>
<p>“还有比拥有高智商更重要的事。”</p>
</blockquote>
<p>不希望恋人看到越来越差劲的自己…爱建立在了自信上，便会在自我否定时被破坏。</p>
<blockquote>
<p>不要管我，我已不是我自己。我正在解体，我不希望你在这里。</p>
</blockquote>
<p>这里的标点符号又消失了…一步一步渐次退化。</p>
<blockquote>
<p>我尽量每天读一点东西多数都是故事书但有时候我必须同样的东西读很多次因为我不懂其中的意思</p>
</blockquote>
<p>祭奠阿尔吉侬，也是在祭奠自己。</p>
<blockquote>
<p>外面已经变得寒冷但我仍然放花在阿尔吉侬的坟上。穆尼太太认为我放花在一只老鼠的坟上实在很笨但我告诉她阿尔吉侬是一只很特别的老鼠。</p>
</blockquote>
<blockquote>
<p>外面已经变得寒冷但我仍然放花在阿尔吉侬的坟上。穆尼太太认为我放花在一只老鼠的坟上实在很笨但我告诉她阿尔吉侬是一只很特别的老鼠。</p>
</blockquote>
<blockquote>
<p>我告诉他我曾经有位叫阿尔吉侬的朋友但它是一只老鼠我们经常一起比赛。</p>
</blockquote>
<blockquote>
<p>我想我知道我为什么运气不好。因为我丢掉了我的兔脚和马蹄铁。我必须赶快在去弄另一个兔脚。</p>
</blockquote>
<blockquote>
<p>有朋友真好……</p>
</blockquote>
<blockquote>
<p>所以我说哈罗纪尼安小姐我今天已准备好要上课只是我弄丢了我们在用的书本。<br />
她开始哭起来并且跑出去教室。</p>
</blockquote>
<blockquote>
<p>因为我学到很多我以前甚至不知到这世界上真的存在的事情。我很高兴能够看到这些即使只是很短的时间。我很高兴我发现了所有关于我的家人和我的事。好像在我想起他们并且看过他们之前我并没有家人似的但现在我知到我有家人而且我和大家一样也是一个人。</p>
</blockquote>
<blockquote>
<p>如果你有机会请放一些花在后院的阿尔吉侬坟上。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记--刘震云《壹句顶壹万句》</title>
    <url>/2022/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%88%98%E9%9C%87%E4%BA%91%E3%80%8A%E5%A3%B9%E5%8F%A5%E9%A1%B6%E5%A3%B9%E4%B8%87%E5%8F%A5%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>读完整部小说，宛如读完了一部普通人的史诗。荡气回肠，平易中见深远。一个圈，一条线，在我看来，便是这本书想要通过“生活”让我们聆听的奥秘。但实际上也不是奥秘，因为它们从始至终都弥散在生活的每一个角落里。</p>
<center>你只需要侧耳倾听，它们，一直都在。</center>
<span id="more"></span>
<h1 id="总评一个圈-一条线"><a class="markdownIt-Anchor" href="#总评一个圈-一条线"></a> 总评：一个圈、一条线</h1>
<p>“平易”，来自于生活的琐碎。这部小说事无巨细地反映了上世纪建国后，小城镇市民的生活风气、精神风貌。家里长、家里短；邻里关系、亲戚关系；结婚了、离婚了、拜把子了，闹掰了…书里面用极大地篇幅描述生活中一丝一缕的琐事，审视情节，便犹如审视一面镜子。人物市侩却鲜活、狭隘却灵动。通读下来，仔细回想下，我似乎可以回忆起那么几个人物——但也只是流掠而过而已。人总是这样。我们一生会遇到数不尽的、光怪陆离的人。但他们绝大多数都会离我们而去，徒留几分模糊的印象。</p>
<p>而“深远”，则同样来自于生活的琐碎。同样是用精彩的文艺升格去勾勒生活的琐碎，以《老友记》、《生活大爆炸》和所谓“韩剧”为代表的肥皂剧，已经在描述“固定几个人”的琐碎生活上做的足够好了。但是这部小说却并不将目光聚焦于几个人。以杨百顺为线索，这部小说串联起从河南延津到山西沁源的、一个又一个由“人”攒起来的圈子，兜兜转转、洋洋洒洒，最终又回到延津。一个人的生活，可以称之为 vlog；一家人的生活，可以称之为肥皂剧——但若将目光转移到由不同地域、不同脾性、不同命运的人组成的圈子上，这些本无交集、却被命运裹挟在一起的人，则更像是一幅媲美《清明上河图》的人间众生相。他们的欢喜悲忧，聚焦在几个离散的点上看，是常人皆有的情感；但一旦我们从宏观上观察这些人的连续性，就会发现一个惊人的事实：</p>
<p>每个人都在过属于自己的生活。</p>
<p>似乎很“废话文学”——过自己的生活？谁不都是过自己的生活？当我们单独看生活的一个片段时，我们总能总结出一些经验教训来；但当我们仔细回味一生时，我们却无法给出什么立竿见影的结论。在生活这个噪点数目趋近于正无穷的连续函数里，你分不清什么是对的、什么是错的，更看不清什么会停留片刻、什么会亘驻永恒。生活就像薛定谔的老猫，你不走到下一秒，下一秒的可能性，就永远不会坍缩成逻辑上的唯一。</p>
<p>生活永远是最好的老师，是只可意会、不可言传的老师。因为生活永远是整体不可积，但处处都可导。当我们追求生活的“终极奥义”时，当我们尝试用言语和智慧去分析生活中的每一处细枝末节时，最终永远只能回归到生活本身。正如书中人物命运般地从河南到山西、又从山西回到河南，正如我们尝试从生活中提炼智慧，而最终提炼出来的却是生活本身。生活教给我们的，是在“命定”和“无奈”背后的、一些更为灵巧美妙的东西。我们在复杂的生活中感叹、奔波；而当我们回过头来看时，一切选择导致的结果、一切故事最终的结局，却又都那么清晰。我们遇到的所有人、经历的所有事，仿佛飞鸿一样纷纷流掠我们的脑海，最终留下一长长的叹息。我们用一声叹息引出对生活的思考，而这思考也最终回归于对生活的叹息，回归于一个精致而简练的圈。</p>
<p>正如吴摩西是串联起从河南到山西这个“圈”的“线”，这本书也从始至终都在探讨一个线索式的问题：生活的尽头，是归于热烈还是孤独？</p>
<p>作者的答案是孤独。看似是在抨击热烈，实则是在质疑永恒。我们人生的每个阶段，似乎总有一两个能说“体己话”的 ta。但平凡生活中的平凡关系，从来都有一个未曾言明的保质期。即使是相濡以沫或高山流水，对面也很难明白你的心意。我们的孤独，终将由我们自己背负。</p>
<p>“月有阴晴圆缺，此事古难全”。我们似乎永远在追求完满，却又永远达不到完满。而孤独便是不完满投射在情感上的常态。孤独从来不是完满，因为孤独从来都是悲伤的情感，是情绪上的隔离。我们的一生永远在追逐完满，背后的事实便是一直在守候既定的不完满，这也决定了完满的尽头一定是不完满、热烈的尽头一定是孤独。贯穿在生活这个圈里的，始终是一条从热烈到孤独的单程线。</p>
<blockquote>
<h2 id="编者按-一句胜过千年"><a class="markdownIt-Anchor" href="#编者按-一句胜过千年"></a> 编者按: 一句胜过千年</h2>
<p>安波舜</p>
<p>本书是刘震云酝酿创作了三年的小说。也是他迄今最成熟最大气的作品。<br />
小说的叙事风格类似明清的稗野日记，语句洗练，情节简洁，叙事直接，有汪曾祺和孙犁等前辈作家遗风。因而本书的每一个字每一句话，都构成言说的艺术，都能拧出作家的汗水。更为重要的是，作家唯有用此语言，才有对应和表现作品的内涵：与神对话的西方文化和人类生态，因为神的无处不在而愉悦自在。人与人之间虽说来往不多，但并不孤独；与人对话的中国文化和浮生百姓，却因为极端注重现实和儒家传统，由于其社群、地位和利益的不同，由于其人心难测和诚信缺失，能够说贴心话、温暖灵魂的朋友并不多，反倒生活在千年的孤独当中。<br />
这样的孤独体验每个国人都有；这样平视百姓、体恤灵魂、为苍生而歌的小说自“五四”以来却是少有的。<br />
小说的前半部写的是过去：孤独无助的吴摩西失去唯一能够“说得上话”的养女，为了寻找，走出延津；小说的后半部写的是现在：吴摩西养女的儿子牛爱国，同样为了摆脱孤独寻找“说得上话”的朋友，走向延津。一出一走，延宕百年。小说中所有的情节关系和人物结构，所有的社群组织和家庭和谐，乃至于性欲爱情，都和人与人能不能对上话，对的话能不能触及心灵、提供温暖、化解冲突、激发情欲有关。话，一旦成了人与人唯一沟通的东西，寻找和孤独便伴随一生。心灵的疲惫和生命的颓废，以及无边无际的茫然和累，便如影随形地产生了。<br />
由此，我们忽然发现，中国人为什么活得这么累。<br />
这种累，犹如漫漫长夜，祖祖辈辈磨砺着我们的神经。</p>
</blockquote>
<h1 id="读书笔记摘录"><a class="markdownIt-Anchor" href="#读书笔记摘录"></a> 读书笔记摘录</h1>
<h2 id="上部-出延津记上"><a class="markdownIt-Anchor" href="#上部-出延津记上"></a> ◆上部 出延津记（上）</h2>
<h3 id="20221124-想法"><a class="markdownIt-Anchor" href="#20221124-想法"></a> 2022/11/24 想法</h3>
<p>为什么看榆树哭呢？因为榆树茁壮成长，灯盏却没了。</p>
<blockquote>
<p><em>老范吃了一惊，不再拦老汪：</em><br />
<em>“走也行啊，可我替你发愁，拖家带口的，你去哪儿呀？”</em><br />
老汪：<br />
“梦里娃告诉我，让我往西。”<br />
老范：<br />
“往西你也找不到娃呀。”<br />
老汪：<br />
“不为找娃，走到哪儿不想娃，就在哪儿落脚。”<br />
第二天一早，老汪带着银瓶和三个孩子，离开了老范家。三个月没哭了，走时看到东家老范家门口有两株榆树，六年前来时，还是两棵小苗，现在已经碗口粗了，看着这树，老汪哭了。</p>
</blockquote>
<h2 id="上部-出延津记下"><a class="markdownIt-Anchor" href="#上部-出延津记下"></a> ◆上部 出延津记（下）</h2>
<h3 id="20221124-想法-2"><a class="markdownIt-Anchor" href="#20221124-想法-2"></a> 2022/11/24 想法</h3>
<p>奇妙的人类社会。</p>
<blockquote>
<p>同来的往往有隔阂。过去相互不认识的，处着处着倒能成为朋友。</p>
</blockquote>
<h3 id="20221124-想法-3"><a class="markdownIt-Anchor" href="#20221124-想法-3"></a> 2022/11/24 想法</h3>
<p>人间事事，事事曲折。</p>
<blockquote>
<p>这些年杨百顺经历过许多事，知道每个事中皆有原委，每个原委之中，又拐着好几道弯</p>
</blockquote>
<h3 id="20221125-想法"><a class="markdownIt-Anchor" href="#20221125-想法"></a> 2022/11/25 想法</h3>
<p>人生就是一个机遇接着一个机遇，一次失败接着一次失败，跌宕起伏。</p>
<blockquote>
<p>杨摩西这时又变回早年的杨百顺。特别是他把在村里舞的一个“拉脸”，带到了县城的社火队里。这个“拉脸”杨家庄有，县城没有。所谓“拉脸”，就是一边提肩掀胯，一边用双手遮住脸，然后一寸一寸拉开，露出你的真面目。脸一寸一寸被拉开，杨摩西舞着没在意，却惊着了众人，齐声给他喝彩。会首老冯，本来对杨摩西没抱太大希望，临时抱佛脚，还担心他舞砸；他舞砸没啥，由于他舞砸，把整个社火都耽误了，事就大了。谁知这小子一上场，不但社火舞得好，竟改变了大家对阎罗的看法。一天社火舞下来，老冯眉开眼笑，拉着杨摩西问东问西。原想着只用杨摩西一天，第二天再找合适的阎罗；其实第二天也不用找了，原来的阎罗、杂货铺掌柜老邓的肚子也好了；老邓的肚子，并不像老褚说的，肠子绞在了一起，还是蛔虫闹的；吃下老褚的药，肠子没捋顺，将蛔虫拉了出来，阴差阳错，肚子也就好了；但老冯不再理老邓，让杨摩西又舞了四天社火。</p>
</blockquote>
<h4 id="20221125-想法-2"><a class="markdownIt-Anchor" href="#20221125-想法-2"></a> 2022/11/25 想法</h4>
<p>清官难断家务事。</p>
<blockquote>
<p>街上的事，只是一个事；家里的事，就不光是事。</p>
</blockquote>
<blockquote>
<p>反正与她说不明白道理，这时再计较道理，反倒是不懂道理了。</p>
</blockquote>
<h2 id="下部-回延津记"><a class="markdownIt-Anchor" href="#下部-回延津记"></a> ◆下部 回延津记</h2>
<h3 id="20221127-想法"><a class="markdownIt-Anchor" href="#20221127-想法"></a> 2022/11/27 想法</h3>
<p>平常人的感动。</p>
<blockquote>
<p>学会开汽车，我开着汽车，带姐去北京。</p>
</blockquote>
<h3 id="20221127-想法-2"><a class="markdownIt-Anchor" href="#20221127-想法-2"></a> 2022/11/27 想法</h3>
<p>人间社交，大抵皆如此：</p>
<blockquote>
<p>“不管你到天南海北，咱俩好一辈子。”</p>
</blockquote>
<blockquote>
<p>五年之中，头两年两人还通信，后来渐渐淡了，后来渐渐断了。</p>
</blockquote>
<blockquote>
<p>可见能否成为朋友，不在相处的长短。</p>
</blockquote>
<h3 id="20221127-想法-3"><a class="markdownIt-Anchor" href="#20221127-想法-3"></a> 2022/11/27 想法</h3>
<p>虽说人生如戏、戏如人生，但想起来是一码事、看起来是一码事，真正过起来又是另一码事。</p>
<blockquote>
<p>戏里说的事，也是世上的事，怎么戏里说的，就比世上的事有意思呢？</p>
</blockquote>
<h3 id="20221128-想法"><a class="markdownIt-Anchor" href="#20221128-想法"></a> 2022/11/28 想法</h3>
<p>曹青娥找到年轻的初恋侯宝山时，看到他不戴白手套了，开着过去那“拉风”的拖拉机载着老婆耕地，给孩子把尿时：</p>
<blockquote>
<p>曹青娥突然明白，她找的侯宝山，不是这个侯宝山；她要找的侯宝山，在这个世界上，已经死了。</p>
</blockquote>
<blockquote>
<p>曹青娥这时才明白，人是掰扯不得的，掰扯了别人，就是掰扯了自己。</p>
</blockquote>
<h3 id="20221128-想法-2"><a class="markdownIt-Anchor" href="#20221128-想法-2"></a> 2022/11/28 想法</h3>
<p>唉…</p>
<blockquote>
<p>但老曹死后三个月，曹青娥突然开始想念爹爹老曹。夜里常梦见他。这时的老曹，又变回七十岁之前的老曹，或六十岁的老曹，或五十岁的老曹，或四十多岁的老曹，或刚买曹青娥，也就是改心时的老曹。老曹用脖子驮着她，笑着在街上走，给她买吃食；或老曹趴在地上，让曹青娥当马骑。</p>
</blockquote>
<h3 id="20221128-想法-3"><a class="markdownIt-Anchor" href="#20221128-想法-3"></a> 2022/11/28 想法</h3>
<p>和当时梦到自己把吴摩西卖给了人贩子如出一辙</p>
<blockquote>
<p>“妮，你嫁走了，谁管我呀？”<br />
或：<br />
“妮，牛书道那人没正性，不能嫁。”</p>
</blockquote>
<h3 id="20221128-想法-4"><a class="markdownIt-Anchor" href="#20221128-想法-4"></a> 2022/11/28 想法</h3>
<p>历史是个圈</p>
<blockquote>
<p>与当初冯文修用牛轭砸李克智一模一样</p>
</blockquote>
<h3 id="20221128-想法-5"><a class="markdownIt-Anchor" href="#20221128-想法-5"></a> 2022/11/28 想法</h3>
<p>曹青娥的人生智慧。</p>
<blockquote>
<p>世上烦的就是这些亲人。论起共事，用谁，都比用他们好。</p>
</blockquote>
<blockquote>
<p>“我活了七十岁，明白一个道理，世上别的东西都能挑，就是日子没法挑。”</p>
</blockquote>
<blockquote>
<p>我还看穿一件事，过日子是过以后，不是过从前。</p>
</blockquote>
<h3 id="20221128-想法-6"><a class="markdownIt-Anchor" href="#20221128-想法-6"></a> 2022/11/28 想法</h3>
<p>通透，不自个儿过个几十年过不出来这种智慧。</p>
<blockquote>
<p>“你跟她说得着，是因为她现在由丈夫养着，你就是与她说个话；等你养她，就成了过日子，到时候就该说过日子了。”</p>
</blockquote>
<h3 id="20221129-想法"><a class="markdownIt-Anchor" href="#20221129-想法"></a> 2022/11/29 想法</h3>
<p>所以其实儿女和父母本身虽然是互相照顾、互相爱护，但并不是互相理解。</p>
<blockquote>
<p>妈曹青娥得病三四年没说，可以说是心疼他们，但除了心疼，还有对他们的失望罢了。</p>
</blockquote>
<blockquote>
<p>牛爱国突然又明白，曹青娥对他说六十年前、五十年前的事情，不对牛爱江、牛爱香、牛爱河说，并不是觉得跟他比跟其他人说得来，而是他遇到的麻烦比其他人更多，借此安慰他罢了。去年牛爱国因为庞丽娜出了事，对沁源伤了心，离开沁源前去看曹青娥，曹青娥知道事情的原委，但没对牛爱国挑破；现在曹青娥不会说话了，牛爱国像去年妈对他一样，他也没将妈的心思，对哥牛爱江和姐牛爱香挑破。</p>
</blockquote>
<h3 id="20221129-想法-2"><a class="markdownIt-Anchor" href="#20221129-想法-2"></a> 2022/11/29 想法</h3>
<p>不知道该说些什么，感觉心脏被锤了一拳。</p>
<blockquote>
<p>因为远，我才能送你。</p>
</blockquote>
<blockquote>
<p>知道见你不容易，才想起这么多话。</p>
</blockquote>
<blockquote>
<p>直到最后一班长途汽车要发车了，曹青娥才上了车。从车上往下看，空空荡荡的汽车站里，就剩下娘一个人，拄着拐杖，嘴在张着，曹青娥不禁流下了泪。</p>
</blockquote>
<blockquote>
<p>“妮，下次我再走的时候，就别再喊我了。娘一个月走不动道，身子是太沉了。刚才到了梦里，我走呀走呀，走到一个河边，腿突然就轻了。河边有花有草，我说，好长时间没洗脸了，蹲这河边洗把脸吧。刚要洗脸，听到你喊我，就又回来了；一回来，又躺在这病床上。妮，下次娘走的时候，就不要再喊娘了；不是娘心狠，不是娘没话跟你说，实在是受不了了……”</p>
</blockquote>
<blockquote>
<p>下次老曹老婆昏迷的时候，曹青娥就没有再喊娘。</p>
</blockquote>
<h3 id="20221129-想法-3"><a class="markdownIt-Anchor" href="#20221129-想法-3"></a> 2022/11/29 想法</h3>
<p>最思念的，还是自己的根。</p>
<blockquote>
<p>曹青娥临终前在喊“爹”，原来不是喊襄垣县的爹爹老曹，而是多年前失散的爹爹吴摩西。</p>
</blockquote>
<h3 id="20221129-想法-4"><a class="markdownIt-Anchor" href="#20221129-想法-4"></a> 2022/11/29 想法</h3>
<p>沧海桑田</p>
<blockquote>
<p>到西街一个地方，告诉牛爱国这是当年吴摩西和吴香香蒸馒头的家，现在成了一家酱菜厂；到了北街转盘处，说转盘西北角，当年是意大利神父老詹的教堂，现在成了“金盆洗脚屋”；到了东街桥下，说这里当年有吴摩西挑水的井，现在成了一个卷烟厂；回到南街，指着姜素荣杂货铺旁边的剧场，说这里当年是吴摩西大闹南街的地方，当年的一个碌碡，现在还戳在剧院门侧</p>
</blockquote>
<h3 id="20221129-想法-5"><a class="markdownIt-Anchor" href="#20221129-想法-5"></a> 2022/11/29 想法</h3>
<p>唯有门前镜湖水，春风不改旧时波。</p>
<blockquote>
<p>七十年前，吴摩西从河南去了陕西；七十年后，牛爱国也从河南去了陕西。</p>
</blockquote>
<blockquote>
<p>牛爱国接过这沓纸，纸已经发黄，许多地方被虫蛀了。打开，纸上是一幅图，画着一座宏大的房子，看上去像一座教堂。教堂顶端有十字架，还有一座大钟。图画得倒是气派</p>
</blockquote>
<blockquote>
<p>院中有一棵大槐树，牛爱国搬一个凳子，坐在大槐树下。低头想了一阵心思，猛地抬头，一个大月亮，缺了半边，顶头在半空中。虽是半个月亮，却也亮得逼人。一阵风吹来，槐树的叶子“索索”地响；脚下树叶的影子，也随声“索索”地晃动。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
</search>
